# -*- cmake -*-
CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

SET(CMAKE_MODULE_PATH @CMAKE_INSTALL_PREFIX@/share/siconos-kernel/cmake)

# Set cmake policies (cmake >= 2.6)
IF(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(VERSION 2.6.0)
  
  # minimum version required
  CMAKE_POLICY(SET CMP0000 NEW) 
  
  # CMAKE_BACKWARDS_COMPATIBILITY should no longer be used
  CMAKE_POLICY(SET CMP0001 NEW) 
  
  # logical target names must be globally unique
  CMAKE_POLICY(SET CMP0002 NEW) 
  
  # Libraries linked via full path no longer produce linker search
  # paths
  CMAKE_POLICY(SET CMP0003 NEW)
  
  # Libraries linked may not have leading or trailing white space
  CMAKE_POLICY(SET CMP0004 NEW) 
  
  # Preprocessor definition values are now escaped automatically.
  CMAKE_POLICY(SET CMP0005 NEW)
  
  # Installing MACOSX_BUNDLE targets requires a BUNDLE DESTINATION.
  CMAKE_POLICY(SET CMP0006 NEW)
  
  #list command no longer ignores empty elements.
  CMAKE_POLICY(SET CMP0007 NEW)
  
ENDIF(COMMAND CMAKE_POLICY)

#REF:http://www.cmake.org/Wiki/CMake_RPATH_handling
# skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

# when building, use the install RPATH already
# (so it doesn't need to relink when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 

# the RPATH to be used when installing
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# linking 
MACRO(LINK_SETUP _TARGET)
  SET(_LINKER_OPTIONS)
  FOREACH(_O ${LINKER_OPTIONS})
    SET(_LINKER_OPTIONS "${_LINKER_OPTIONS} ${_O}")
  ENDFOREACH(_O ${LINKER_OPTIONS})
  SET_TARGET_PROPERTIES(${_TARGET} PROPERTIES LINK_FLAGS "${_LINKER_OPTIONS}")

  FOREACH(_L ${PROJECT_LINK_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_TARGET} ${_L})
  ENDFOREACH(_L ${PROJECT_LINK_LIBRARIES})
  
  FOREACH(_L ${PROJECT_FORTRAN_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_TARGET} ${_L})
  ENDFOREACH(_L ${PROJECT_FORTRAN_LIBRARIES})
ENDMACRO(LINK_SETUP _TARGET)

# Build settings are not mandatory (failure on cmake versions mismatch)
IF(IMPORT_BUILD_SETTINGS)
  INCLUDE(CMakeImportBuildSettings)
  CMAKE_IMPORT_BUILD_SETTINGS(BuildSettings)
ENDIF(IMPORT_BUILD_SETTINGS)

# Siconos settings
INCLUDE(LibraryDependencies)
INCLUDE(Settings)

# Build type : if not specified, same as Kernel 
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE ${COMPILE_TIME_BUILD_TYPE})
ENDIF(NOT CMAKE_BUILD_TYPE)

# compile time flags 
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMPILE_TIME_CXX_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMPILE_TIME_C_FLAGS}")
SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${COMPILE_TIME_Fortran_FLAGS}")

# Compiler options (given with --opt)
FOREACH(_O ${COMPILER_OPTIONS})
  ADD_DEFINITIONS(${_O})
ENDFOREACH(_O ${COMPILER_OPTIONS})

# Definitions (given with -D) are passed to the preprocessor
FOREACH(_DEF ${ALL_EXTRA_DEFINITIONS})
  IF(DEFINED ${_DEF})
    ADD_DEFINITIONS(-D${_DEF}=${${_DEF}})
  ELSE(DEFINED ${_DEF})
    ADD_DEFINITIONS(-D${_DEF})
  ENDIF(DEFINED ${_DEF})
ENDFOREACH(_DEF ${ALL_EXTRA_DEFINITIONS})

# Get the name of the main file => name of the executable
IF(MAIN_SOURCE)
  GET_FILENAME_COMPONENT(_EXE ${MAIN_SOURCE} NAME_WE)
  GET_FILENAME_COMPONENT(_MAIN_DIR ${MAIN_SOURCE} PATH)
ENDIF(MAIN_SOURCE)

IF(_EXE)

  #
  # include user cmake commands in ${_EXE}.cmake
  #  
  IF(EXISTS ${_EXE}.cmake)
    MESSAGE(STATUS "Including ${_EXE}.cmake")
    INCLUDE(${_EXE}.cmake)
  ENDIF(EXISTS ${_EXE}.cmake)
  
  IF(_MAIN_DIR)
    IF(EXISTS ${_MAIN_DIR}/${_EXE}.cmake)
      MESSAGE(STATUS "Including ${_MAIN_DIR}/${_EXE}.cmake")
      INCLUDE(${_MAIN_DIR}/${_EXE}.cmake)
    ENDIF(EXISTS ${_MAIN_DIR}/${_EXE}.cmake)
  ENDIF(_MAIN_DIR)
  
  #
  # include and lib directories, before target definition
  #  
  IF(_MAIN_DIR)
    INCLUDE_DIRECTORIES(${_MAIN_DIR})
  ENDIF(_MAIN_DIR)
  
  IF(WithQGLViewer)
    FIND_PACKAGE(X11 REQUIRED)
    FIND_PACKAGE(OpenGL REQUIRED)
    FIND_PACKAGE(QGLViewer REQUIRED)
    INCLUDE_DIRECTORIES(${QGLVIEWER_INCLUDE_DIR})
    ADD_DEFINITIONS(${QGLVIEWER_DEFINITIONS})

    FIND_PACKAGE(Qt4 REQUIRED)

    INCLUDE(${QT_USE_FILE})
    # not set by UseQt4:
    INCLUDE_DIRECTORIES(${QT_INCLUDES})

  ENDIF(WithQGLViewer)

  IF(WithOpenGL)
    FIND_PACKAGE(OpenGL REQUIRED)
    INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
  ENDIF(WithOpenGL)

  FOREACH(_D ${PROJECT_INCLUDE_DIRECTORIES})
    INCLUDE_DIRECTORIES(${_D})
  ENDFOREACH(_D ${PROJECT_INCLUDE_DIRECTORIES})

  FOREACH(_D ${LINKER_DIRECTORIES})
    LINK_DIRECTORIES(${_D})
  ENDFOREACH(_D ${LINKER_DIRECTORIES})
  
  FOREACH(_D ${PROJECT_LINK_DIRECTORIES})
    LINK_DIRECTORIES(${_D})
  ENDFOREACH(_D ${PROJECT_LINK_DIRECTORIES})
   
  FOREACH(_D ${PROJECT_FORTRAN_COMPILER_LIB_DIRECTORIES})
    LINK_DIRECTORIES(${_D})
  ENDFOREACH(_D ${PROJECT_FORTRAN_COMPILER_LIB_DIRECTORIES})

  #
  # target definition
  #
  # If some extra sources are given ...

  IF(EXISTS ${_MAIN_DIR}/plugin)
    LIST(APPEND PLUGIN_DIRECTORIES ${_MAIN_DIR}/plugin)
  ENDIF(EXISTS ${_MAIN_DIR}/plugin)
  
  IF(EXISTS ${_MAIN_DIR}/plugins)
    LIST(APPEND PLUGINS_DIRECTORIES ${_MAIN_DIR}/plugins)
  ENDIF(EXISTS ${_MAIN_DIR}/plugins)    

  # Default name for extra sources dir: src
  IF(EXISTS ${_MAIN_DIR}/src)
    IF(IS_DIRECTORY ${_MAIN_DIR}/src)
      LIST(APPEND SOURCES_DIRECTORIES ${_MAIN_DIR}/src)
    ENDIF(IS_DIRECTORY ${_MAIN_DIR}/src)
  ENDIF(EXISTS ${_MAIN_DIR}/src)
  
  IF(SOURCES_DIRECTORIES) # WARNING: SOURCES_DIRECTORIES must handle absolute paths!!
    FOREACH(_D ${SOURCES_DIRECTORIES})
      FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
      FOREACH(_SRC ${_ALL_SRCS})
        IF(_SRC STREQUAL ${MAIN_SOURCE})
        ELSE(_SRC STREQUAL ${MAIN_SOURCE})
          LIST(APPEND _ALL_EXE_SRCS ${_SRC})
        ENDIF(_SRC STREQUAL ${MAIN_SOURCE})
      ENDFOREACH(_SRC ${_ALL_SRCS})
      
      INCLUDE_DIRECTORIES(${_D})
            
      IF(EXISTS ${_D}/plugin)
        LIST(APPEND PLUGIN_DIRECTORIES ${_D}/plugin)
      ENDIF(EXISTS ${_D}/plugin)
      
      IF(EXISTS ${_D}/plugins)
        LIST(APPEND PLUGINS_DIRECTORIES ${_D}/plugins)
      ENDIF(EXISTS ${_D}/plugins)

    ENDFOREACH(_D ${SOURCES_DIRECTORIES})
    
    # The executable: build with sources in SOURCES_DIRECTORIES and MAIN_SOURCE.
    ADD_EXECUTABLE(${_EXE} ${_ALL_EXE_SRCS} ${MAIN_SOURCE})

  ELSE(SOURCES_DIRECTORIES)

    ADD_EXECUTABLE(${_EXE} ${MAIN_SOURCE})  
  ENDIF(SOURCES_DIRECTORIES)

    
  #
  # final link
  #
  LINK_SETUP(${_EXE})

  #
  # Some specifities
  #
  IF(WithQGLViewer)
    TARGET_LINK_LIBRARIES(${_EXE} ${QGLVIEWER_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTXML_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTCORE_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTASSISTANT_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTGUI_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTOPENGL_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_gl_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_glu_LIBRARY})
  ENDIF(WithQGLViewer)

  IF(WithOpenGL)
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_LIBRARIES})
  ENDIF(WithOpenGL)

  FOREACH(_L ${LINKER_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_EXE} ${_L})
  ENDFOREACH(_L ${LINKER_LIBRARIES})

  #
  # Installation in call directory
  #
  INSTALL(TARGETS ${_EXE} DESTINATION ${CALL_PWD})

  #
  # Plugins directory
  # 
  IF(PLUGIN_SOURCE)
    IF(EXISTS ${PLUGIN_SOURCE})
      GET_FILENAME_COMPONENT(_PLUGIN ${PLUGIN_SOURCE} NAME_WE)
      ADD_LIBRARY(${_PLUGIN} MODULE ${PLUGIN_SOURCE})
      SET_TARGET_PROPERTIES(${_PLUGIN}  PROPERTIES PREFIX "")
      LINK_SETUP(${_PLUGIN})
      INSTALL(TARGETS ${_PLUGIN} DESTINATION ${CALL_PWD})
    ENDIF(EXISTS ${PLUGIN_SOURCE})
  ENDIF(PLUGIN_SOURCE)
  
  IF(PLUGINS_SOURCES)
    FOREACH(_PLUGIN_SOURCE "${PLUGINS_SOURCES}")
      IF(EXISTS ${_PLUGIN_SOURCE})
        IF(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
        ELSE(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
          GET_FILENAME_COMPONENT(_PLUGIN ${_PLUGIN_SOURCE} NAME_WE)
          ADD_LIBRARY(${_PLUGIN} MODULE ${_PLUGIN_SOURCE})
          SET_TARGET_PROPERTIES(${_PLUGIN} PROPERTIES PREFIX "")
          LINK_SETUP(${_PLUGIN})
        ENDIF(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
        INSTALL(TARGETS ${_PLUGIN} DESTINATION ${CALL_PWD}) 
      ENDIF(EXISTS ${_PLUGIN_SOURCE})
    ENDFOREACH(_PLUGIN_SOURCE "${PLUGINS_SOURCES}")
  ENDIF(PLUGINS_SOURCES)
  
  IF(PLUGIN_DIRECTORIES)
    FOREACH(_D ${PLUGIN_DIRECTORIES})
      GET_FILENAME_COMPONENT(_DN ${_D} NAME)
      FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
      IF(_ALL_SRCS)
        ADD_LIBRARY(${_DN} MODULE ${_ALL_SRCS})
        SET_TARGET_PROPERTIES(${_DN} PROPERTIES PREFIX "")
        LINK_SETUP(${_DN})
        INSTALL(TARGETS ${_DN} DESTINATION ${CALL_PWD})
      ENDIF(_ALL_SRCS)
    ENDFOREACH(_D ${PLUGIN_DIRECTORIES})
  ENDIF(PLUGIN_DIRECTORIES)
  
  IF(PLUGINS_DIRECTORIES)
    FOREACH(_D ${PLUGINS_DIRECTORIES})
      FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
      FOREACH(_F ${_ALL_SRCS})
        IF(_F STREQUAL "${PLUGIN_SOURCE}")
        ELSE(_F STREQUAL "${PLUGIN_SOURCE}") 
          GET_FILENAME_COMPONENT(_PN ${_F} NAME_WE)
          ADD_LIBRARY(${_PN} MODULE ${_F})
          SET_TARGET_PROPERTIES(${_PN} PROPERTIES PREFIX "")
          LINK_SETUP(${_PN})
          INSTALL(TARGETS ${_PN} DESTINATION ${CALL_PWD})
        ENDIF(_F STREQUAL "${PLUGIN_SOURCE}") 
      ENDFOREACH(_F ${_ALL_SRCS})
    ENDFOREACH(_D ${PLUGINS_DIRECTORIES})
  ENDIF(PLUGINS_DIRECTORIES)

ENDIF(_EXE)

