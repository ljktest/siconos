# -*- cmake -*-
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.3)

IF(NOT NEW_SICONOS_PREFIX)
  SET(SICONOS_PREFIX @CMAKE_INSTALL_PREFIX@)
ELSE()
  SET(SICONOS_PREFIX ${NEW_SICONOS_PREFIX})
ENDIF()

SET(CMAKE_MODULE_PATH ${SICONOS_PREFIX}/share/siconos-kernel/cmake)

# use variables to avoid warnings
SET(_use_ ${CALL_PWD};${COMMAND_LINE_LINKER_OPTIONS};${LINKER_LIBRARIES})

# install targe tracker
SET(_install)

# http://www.cmake.org/Wiki/CMake_RPATH_handling
# do not skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

# when building, don't use the install RPATH already (but later on
# when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 

# add the automatically determined parts of the RPATH which point to
# directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# linking 
MACRO(LINK_SETUP _TARGET)
  FOREACH(_L ${PROJECT_LINK_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_TARGET} ${_L})
  ENDFOREACH(_L ${PROJECT_LINK_LIBRARIES})
  
  FOREACH(_L ${PROJECT_FORTRAN_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_TARGET} ${_L})
  ENDFOREACH(_L ${PROJECT_FORTRAN_LIBRARIES})

  SET(_LINKER_OPTIONS)
  FOREACH(_O ${COMMAND_LINE_LINKER_OPTIONS} ${LINKER_OPTIONS})
    SET(_LINKER_OPTIONS "${_LINKER_OPTIONS} ${_O}")
  ENDFOREACH(_O ${LINKER_OPTIONS})
  SET_TARGET_PROPERTIES(${_TARGET} PROPERTIES LINK_FLAGS "${_LINKER_OPTIONS}")
ENDMACRO(LINK_SETUP _TARGET)

# Siconos settings
INCLUDE(LibraryDependencies)
INCLUDE(Settings)

# Build type : if not specified, same as Kernel 
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE ${COMPILE_TIME_BUILD_TYPE})
ENDIF(NOT CMAKE_BUILD_TYPE)

# compile time flags 
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${COMPILE_TIME_CXX_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMPILE_TIME_C_FLAGS}")
SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${COMPILE_TIME_Fortran_FLAGS}")

# Compiler options (given with --opt)
FOREACH(_O ${COMPILER_OPTIONS})
  ADD_DEFINITIONS(${_O})
ENDFOREACH(_O ${COMPILER_OPTIONS})

# Definitions (given with -D) are passed to the preprocessor
FOREACH(_DEF ${ALL_EXTRA_DEFINITIONS})
  IF(DEFINED ${_DEF})
    ADD_DEFINITIONS(-D${_DEF}=${${_DEF}})
  ELSE(DEFINED ${_DEF})
    ADD_DEFINITIONS(-D${_DEF})
  ENDIF(DEFINED ${_DEF})
ENDFOREACH(_DEF ${ALL_EXTRA_DEFINITIONS})

# Get the name of the main file => name of the executable
IF(MAIN_SOURCE)
  IF(BUILD_MAIN)
    GET_FILENAME_COMPONENT(_EXE ${MAIN_SOURCE} NAME_WE)
  ENDIF(BUILD_MAIN)
  GET_FILENAME_COMPONENT(_MAIN_DIR ${MAIN_SOURCE} PATH)
ENDIF(MAIN_SOURCE)

IF(_EXE)

  #
  # include user cmake commands in ${_EXE}.cmake
  #  
  IF(EXISTS ${_EXE}.cmake)
    MESSAGE(STATUS "Including ${_EXE}.cmake")
    INCLUDE(${_EXE}.cmake)
  ENDIF(EXISTS ${_EXE}.cmake)
  
  IF(_MAIN_DIR)
    IF(EXISTS ${_MAIN_DIR}/${_EXE}.cmake)
      MESSAGE(STATUS "Including ${_MAIN_DIR}/${_EXE}.cmake")
      INCLUDE(${_MAIN_DIR}/${_EXE}.cmake)
    ENDIF(EXISTS ${_MAIN_DIR}/${_EXE}.cmake)
  ENDIF(_MAIN_DIR)

ENDIF(_EXE)
  
#
# include and lib directories, before target definition
#  
IF(_MAIN_DIR)
  INCLUDE_DIRECTORIES(${_MAIN_DIR})
ENDIF(_MAIN_DIR)
  
IF(WithQGLViewer)
  FIND_PACKAGE(X11 REQUIRED)
  FIND_PACKAGE(OpenGL REQUIRED)
  FIND_PACKAGE(QGLViewer REQUIRED)
  INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})			
    
  INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})			
  IF(OPENGL_FOUND)		
    FIND_PACKAGE_MESSAGE(OpenGL "Found OpenGL: ${OPENGL_LIBRARIES}"
      "[${OPENGL_INCLUDE_DIR}]")
  ELSE (OPENGL_FOUND)	
    IF (OPENGL_FIND_REQUIRED)	
      MESSAGE(FATAL_ERROR "Could not find OPENGL")
    ENDIF (OPENGL_FIND_REQUIRED)	 
  ENDIF (OPENGL_FOUND)	
    
  INCLUDE_DIRECTORIES(${QGLVIEWER_INCLUDE_DIR})   
  ADD_DEFINITIONS(${QGLVIEWER_DEFINITIONS})
  
  FIND_PACKAGE(Qt4 REQUIRED)

  INCLUDE(${QT_USE_FILE})
  # not set by UseQt4:
  INCLUDE_DIRECTORIES(${QT_INCLUDES})
  
ENDIF(WithQGLViewer)

IF(WithOpenGL)
  FIND_PACKAGE(OpenGL REQUIRED)
  IF(OPENGL_FOUND)		
    FIND_PACKAGE_MESSAGE(OpenGL "Found OpenGL: ${OPENGL_LIBRARIES}"
      "[${OPENGL_INCLUDE_DIR}]")
  ELSE (OPENGL_FOUND)	
    IF (OPENGL_FIND_REQUIRED)	
      MESSAGE(FATAL_ERROR "Could not find OPENGL")
    ENDIF (OPENGL_FIND_REQUIRED)	 
  ENDIF (OPENGL_FOUND) 
  INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
ENDIF(WithOpenGL)

FOREACH(_D ${PROJECT_INCLUDE_DIRECTORIES})
  INCLUDE_DIRECTORIES(${_D})
ENDFOREACH(_D ${PROJECT_INCLUDE_DIRECTORIES})

FOREACH(_D ${LINKER_DIRECTORIES})
  LINK_DIRECTORIES(${_D})
ENDFOREACH(_D ${LINKER_DIRECTORIES})
  
FOREACH(_D ${PROJECT_LINK_DIRECTORIES})
  LINK_DIRECTORIES(${_D})
ENDFOREACH(_D ${PROJECT_LINK_DIRECTORIES})
   
FOREACH(_D ${PROJECT_FORTRAN_COMPILER_LIB_DIRECTORIES})
  LINK_DIRECTORIES(${_D})
ENDFOREACH(_D ${PROJECT_FORTRAN_COMPILER_LIB_DIRECTORIES})

#
# target definition
#
# If some extra sources are given ...

IF(EXISTS ${_MAIN_DIR}/plugin)
  LIST(APPEND PLUGIN_DIRECTORIES ${_MAIN_DIR}/plugin)
ENDIF(EXISTS ${_MAIN_DIR}/plugin)
  
IF(EXISTS ${_MAIN_DIR}/plugins)
  LIST(APPEND PLUGINS_DIRECTORIES ${_MAIN_DIR}/plugins)
ENDIF(EXISTS ${_MAIN_DIR}/plugins)    

# Default name for extra sources dir: src
IF(EXISTS ${_MAIN_DIR}/src)
  IF(IS_DIRECTORY ${_MAIN_DIR}/src)
    LIST(APPEND SOURCES_DIRECTORIES ${_MAIN_DIR}/src)
  ENDIF(IS_DIRECTORY ${_MAIN_DIR}/src)
ENDIF(EXISTS ${_MAIN_DIR}/src)
  
IF(SOURCES_DIRECTORIES) # WARNING: SOURCES_DIRECTORIES must handle absolute paths!!
  FOREACH(_D ${SOURCES_DIRECTORIES})
    FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
    FOREACH(_SRC ${_ALL_SRCS})
      IF(_SRC STREQUAL ${MAIN_SOURCE})
      ELSE(_SRC STREQUAL ${MAIN_SOURCE})
        LIST(APPEND _ALL_EXE_SRCS ${_SRC})
      ENDIF(_SRC STREQUAL ${MAIN_SOURCE})
    ENDFOREACH(_SRC ${_ALL_SRCS})
    
    INCLUDE_DIRECTORIES(${_D})
            
    IF(EXISTS ${_D}/plugin)
      LIST(APPEND PLUGIN_DIRECTORIES ${_D}/plugin)
    ENDIF(EXISTS ${_D}/plugin)
      
    IF(EXISTS ${_D}/plugins)
      LIST(APPEND PLUGINS_DIRECTORIES ${_D}/plugins)
    ENDIF(EXISTS ${_D}/plugins)

  ENDFOREACH(_D ${SOURCES_DIRECTORIES})
  
  IF(_EXE)
    # The executable: build with sources in SOURCES_DIRECTORIES and MAIN_SOURCE.
    ADD_EXECUTABLE(${_EXE} ${_ALL_EXE_SRCS} ${MAIN_SOURCE})
  ENDIF(_EXE)

ELSE(SOURCES_DIRECTORIES)

  IF(_EXE)
    ADD_EXECUTABLE(${_EXE} ${MAIN_SOURCE})  
  ENDIF(_EXE)
ENDIF(SOURCES_DIRECTORIES)

    
#
# final link
#
IF(_EXE)
  LINK_SETUP(${_EXE})
  
  #
  # Some specifities
  #
  IF(WithQGLViewer)
    TARGET_LINK_LIBRARIES(${_EXE} ${QGLVIEWER_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTXML_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTCORE_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTASSISTANT_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTGUI_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${QT_QTOPENGL_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_gl_LIBRARY})
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_glu_LIBRARY})
  ENDIF(WithQGLViewer)
  
  IF(WithOpenGL)
    TARGET_LINK_LIBRARIES(${_EXE} ${OPENGL_LIBRARIES})
  ENDIF(WithOpenGL)

  FOREACH(_L ${LINKER_LIBRARIES})
    TARGET_LINK_LIBRARIES(${_EXE} ${_L})
  ENDFOREACH(_L ${LINKER_LIBRARIES})
  
  #
  # Installation in call directory
  #
  INSTALL(TARGETS ${_EXE} DESTINATION ${CALL_PWD})
  SET(_install TRUE)
ENDIF(_EXE)

#
# Plugins directory
# 
IF(PLUGIN_SOURCE)
  IF(EXISTS ${PLUGIN_SOURCE})
    GET_FILENAME_COMPONENT(_PLUGIN ${PLUGIN_SOURCE} NAME_WE)
    ADD_LIBRARY(${_PLUGIN} MODULE ${PLUGIN_SOURCE})
    SET_TARGET_PROPERTIES(${_PLUGIN}  PROPERTIES PREFIX "")
    LINK_SETUP(${_PLUGIN})
    INSTALL(TARGETS ${_PLUGIN} DESTINATION ${CALL_PWD})
    SET(_install TRUE)
  ENDIF(EXISTS ${PLUGIN_SOURCE})
ENDIF(PLUGIN_SOURCE)

IF(PLUGINS_SOURCES)
  FOREACH(_PLUGIN_SOURCE "${PLUGINS_SOURCES}")
    IF(EXISTS ${_PLUGIN_SOURCE})
      IF(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
      ELSE(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
        GET_FILENAME_COMPONENT(_PLUGIN ${_PLUGIN_SOURCE} NAME_WE)
        ADD_LIBRARY(${_PLUGIN} MODULE ${_PLUGIN_SOURCE})
        SET_TARGET_PROPERTIES(${_PLUGIN} PROPERTIES PREFIX "")
        LINK_SETUP(${_PLUGIN})
      ENDIF(_PLUGIN_SOURCE STREQUAL "${PLUGIN_SOURCE}")
      INSTALL(TARGETS ${_PLUGIN} DESTINATION ${CALL_PWD}) 
      SET(_install TRUE)
    ENDIF(EXISTS ${_PLUGIN_SOURCE})
  ENDFOREACH(_PLUGIN_SOURCE "${PLUGINS_SOURCES}")
ENDIF(PLUGINS_SOURCES)
  
IF(PLUGIN_DIRECTORIES)
  FOREACH(_D ${PLUGIN_DIRECTORIES})
    GET_FILENAME_COMPONENT(_DN ${_D} NAME)
    FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
    IF(_ALL_SRCS)
      ADD_LIBRARY(${_DN} MODULE ${_ALL_SRCS})
      SET_TARGET_PROPERTIES(${_DN} PROPERTIES PREFIX "")
      LINK_SETUP(${_DN})
      INSTALL(TARGETS ${_DN} DESTINATION ${CALL_PWD})
      SET(_install TRUE)
    ENDIF(_ALL_SRCS)
  ENDFOREACH(_D ${PLUGIN_DIRECTORIES})
ENDIF(PLUGIN_DIRECTORIES)
  
IF(PLUGINS_DIRECTORIES)
  FOREACH(_D ${PLUGINS_DIRECTORIES})
    FILE(GLOB _ALL_SRCS ${_D}/*.c ${_D}/*.cpp ${_D}/*.f)
    FOREACH(_F ${_ALL_SRCS})
      IF(_F STREQUAL "${PLUGIN_SOURCE}")
      ELSE(_F STREQUAL "${PLUGIN_SOURCE}") 
        GET_FILENAME_COMPONENT(_PN ${_F} NAME_WE)
        ADD_LIBRARY(${_PN} MODULE ${_F})
        SET_TARGET_PROPERTIES(${_PN} PROPERTIES PREFIX "")
        LINK_SETUP(${_PN})
        INSTALL(TARGETS ${_PN} DESTINATION ${CALL_PWD})
        SET(_install TRUE)
      ENDIF(_F STREQUAL "${PLUGIN_SOURCE}") 
    ENDFOREACH(_F ${_ALL_SRCS})
  ENDFOREACH(_D ${PLUGINS_DIRECTORIES})
ENDIF(PLUGINS_DIRECTORIES)

IF(NOT _install)
  ADD_CUSTOM_TARGET(install COMMAND cmake -E echo 'nothing to install')
ENDIF(NOT _install)

