#!/bin/sh
# Siconos-Kernel version @VERSION@, Copyright INRIA 2005-2008.
# Siconos is a program dedicated to modeling, simulation and control
# of non smooth dynamical systems.	
# Siconos is a free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Siconos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Siconos; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Contact: Vincent ACARY vincent.acary@inrialpes.fr 

NUMERICS_PREFIX=${NUMERICSPATH:-@SiconosNumerics_LIBRARY_DIRS_DIR@}
KERNEL_PREFIX=${SICONOSPATH:-@CMAKE_INSTALL_PREFIX@}

exec=true
pwd=`pwd`
myname=`basename $0`

cartridge() {
    echo;
    echo "|=============================================================================|";
    echo "| Siconos-Kernel version @VERSION@ (temporary release), Copyright INRIA 2005-2008.|";
    echo "|                                                                             |";
    echo "|     Free software under GNU General Public License.                         |";
    echo "|=============================================================================|"; 
    echo;
}

usage() { 
    echo "Usage: $myname [options] [YourSample.cpp|location/YourSample.cpp] [Arguments]";
    echo "The siconos command compile, link and run a Siconos program.";
    echo "Options are: ";
    echo "     -a : find and compile all sources files in YourSample.cpp directory.";
    echo "     -c | -clean : to clean the current directory (deletes binary files, etc.).";
    echo "     -D key | -D key=value : to define a 'cmake' and a 'cpp' variable.";
    echo "     -g : to compile with debug informations."
    echo "     -h | -help : to print this help.";
    echo "     -noexec : compile only.";
    echo "     -opt <opt> : add option <opt> to compiler." 
    echo "     -P prefix_command : to add a prefix command (time, valgrind, gdb, etc.)."
    echo "     -plugin_dir <plugin_directory> : "
    echo "         create <plugin_directory>.so "
    echo "         with plugin sources under <plugin_directory>." 
    echo "     -plugins_dir <plugins_directory> : "
    echo "         for each source file <name_src>.[c|f|cpp] under <plugins_directory>"
    echo "         create a plugin <name_src>.so"
    echo "     -src_dir <source_directory> : add all sources files under <source_directory>."
    echo "     -v : to print 'make' commands as they are executed.";

}

with_arg() { 
    if test -z "$2"; then
        usage
        exit 1
    else
        return 0
    fi
}



if `getopt -T >/dev/null 2>&1` ; [ $? = 4 ] ; then
    args=`getopt -n $myname -a \
 -o aghD:P:v \
 -l clean,help,noexec,src_dir:,opt:,plugin_dir:,plugins_dir: \
 -- "$@"`
    if test $? -ne 0; then
        usage
        exit 1
    fi
    eval set -- "$args"
else
    no_parsing=true
    true
fi

while [ $# -gt 0 ] ; do
    case "$1" in
        -a) all_srcs=true;;
        --clean) make_args=clean; exec=false;;
        -D) with_arg $@; shift; definitions="$definitions $1";;
        -g) definitions="$definitions CMAKE_BUILD_TYPE=Debug";;
        -h|-help) usage; exit 0;;
        --noexec) exec=false;;
        -P) with_arg $@; shift; exec_prefix=$1;;
        --opt) with_arg $@; shift;
            case :$1,:$compiler_options in
                :*,:) compiler_options=$1;;
                :*,:*) compiler_options="$compiler_options;$1";;
            esac;;
        --plugin_dir) with_arg $@; shift
            case :$1,:$plugin_directories in
                :*,:) plugin_directories=$1;;
                :*,:*) plugin_directories="$plugin_directories;$1";;
            esac;;
        --plugins_dir) with_arg $@; shift
            case :$1,:$plugins_directories in
                :*,:) plugins_directories=$1;;
                :*,:*) plugins_directories="$plugins_directories;$1";;
            esac;;
        --src_dir) with_arg $@; shift
            all_srcs=true
            case :$1,:$sources_directories in
                :*,:) sources_directories=$1;;
                :*,:*) sources_directories="$sources_directories;$1";;
            esac;;
        -v) make_args="VERBOSE=1";;
        --) shift; break;;
        *) case $no_parsing in true) break;; *) usage; exit 1;; esac
    esac
    shift
done

if test ! "$make_args" = "clean"; then

    case :$1,:$sources_directories in
        :,:) usage; exit 1;;
        :/*,*) main_source=$1;;
        :*,*) main_source=$pwd/$1;;
    esac

    shift

    if test -z "$sources_directories"; then 
        if test "$all_srcs" = "true"; then
            sources_directories=`dirname $main_source`
        fi
    fi

    if test ! -z "$main_source"; then
        exe=`expr "\`basename $main_source\`" : "\(.*\).cpp"`
    else
        exe=`basename $sources_directory`
    fi

    tmp=`expr "$main_source" : "\(.*\).cpp"`Plugin.cpp
    if test -f "$tmp"; then
        plugins_sources="$tmp"
    fi

    case $exe in
        *TS) ext_plugin_source=`expr "$main_source" : "\(.*\)TS.cpp"`Plugin.cpp;;
        *ED) ext_plugin_source=`expr "$main_source" : "\(.*\)ED.cpp"`Plugin.cpp;;
    esac
    case :$ext_plugin_source,:$plugins_sources in
        :,:*);;
        :*,:) plugins_sources=$ext_plugin_source;;
        :*,:*) plugins_sources="$ext_plugin_source;$ext_plugin_source";;
    esac

    for d in $definitions; do
        case $d in
            *=*) 
                extra_defs="$extra_defs -D$d" 
                ndef=`expr "$d" : "\(.*\)=.*"`
                all_extra_defs="$all_extra_defs;$ndef";;
            *)  extra_defs="$extra_defs -D$d=1"
                all_extra_defs="$all_extra_defs;$d";;
        esac
    done

    if ! cmake $KERNEL_PREFIX/share/siconos-kernel/ \
        -DMAIN_SOURCE=$main_source \
        -DPLUGINS_SOURCES=$plugins_sources \
        -DPLUGINS_DIRECTORIES=$plugins_directories \
        -DPLUGIN_DIRECTORIES=$plugin_directories \
        -DSOURCES_DIRECTORIES=$sources_directories \
        -DCOMPILER_OPTIONS=$compiler_options \
        -DALL_EXTRA_DEFINITIONS=$all_extra_defs \
        $extra_defs; then
        echo "$myname: $exe build configuration failed" >&2
        exit 1
    fi
fi

if test -f ./Makefile; then
    make $make_args || exit 1
else
    echo "$myname: nothing to clean" 
fi

if test $exec = true; then
    eval LD_LIBRARY_PATH=$NUMERICS_PREFIX/lib:$KERNEL_PREFIX/lib:$KERNEL_PREFIX/share/siconos-kernel:. $exec_prefix ./$exe $@
fi
