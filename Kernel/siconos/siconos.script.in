#!/bin/sh
# Siconos-Kernel version @VERSION@, Copyright INRIA 2005-2010.
# Siconos is a program dedicated to modeling, simulation and control
# of non smooth dynamical systems.	
# Siconos is a free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Siconos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Siconos; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Contact: Vincent ACARY, siconos-team@lists.gforge.inria.fr

NUMERICS_PREFIX=${NUMERICSPATH:-@SiconosNumerics_LIBRARY_DIRS_DIR@}
KERNEL_PREFIX=${SICONOSPATH:-@CMAKE_INSTALL_PREFIX@}
exec=true
comp=true
myname=`basename $0`
call_pwd=`pwd`

cartridge() {
    echo;
    echo "|=============================================================================|";
    echo "|          Siconos-Kernel version @VERSION@, Copyright INRIA 2005-2010.           |";
    echo "|                                                                             |";
    echo "|                 Free software under GNU General Public License.             |";
    echo "|=============================================================================|"; 
    echo;
}

usage() { 
cat<<EOF

The siconos command compiles, links and runs a Siconos program.

Usage: $myname [options] [YourExample.cpp|location/YourExample.cpp] [Arguments]
 

 --> To use other source files (*.c, *.cpp, *.f), put them in ./src or
     -see option src_dir below

 --> To create a library and link it with the siconos program, create
    a ./plugin directory or use -plugin_dir option below.

 --> To create some libraries and link them with the siconos program,
     create a ./plugins directory or use -plugins_dir option below.

Options are: 

 -a : to find and compile all sources files in YourExample.cpp
      directory.

 -build_dir <dir> : build is done in <dir>. Under /tmp, a temp
                    directory is created

 
 -clean_build : clean build directory.

 -c | -clean : to clean the current directory (deletes binary files,
               etc.).

 -D key | -D key=value : to define a 'cmake' and a 'cpp' variable.
 
 -g : to compile with debug informations.
 
 -h | -help : to print this help.

 -j<n>   : parrallel compilation with n jobs 
 
 -L<dir> : add directory <dir> to the list from with the linker search
           for libraries.
 
 -l<lib> : link with library <lib>.
 
 -noexec : compile only.

 -nocomp : execute only.

 -O<n> : set compiler optimization.
 
 -opt <opt> : add option <opt> to compiler. 
 
 -ldopt <opt> : add option <opt> to linker. 
 
 -P prefix_command : to add a prefix command (time, valgrind, gdb,
                     etc.).


 -plugin_dir <plugin_directory> (default = plugin): create
    <plugin_directory>.so with plugin sources under
    <plugin_directory>.

 
 -plugins_dir <plugins_directory> (default = plugins): for each source
    file <name_src>.[c|f|cpp] under <plugins_directory> it creates a
    plugin <name_src>.so


 -src_dir <source_directory> (default = src): all sources files under
    <source_directory> (Warning: absolute path!!)  to the executable.

 -v : to print 'make' commands as they are executed.
     
EOF
}

with_arg() { 
    if test -z "$2"; then
        usage
        exit 1
    else
        return 0
    fi
}

cartridge

if `getopt -T >/dev/null 2>&1` ; [ $? = 4 ] ; then
    args=`getopt -n $myname -a \
 -o acghO:I:j:l:L:D:P:v \
 -l build_dir:,clean_build,clean,help,noexec,nocomp,src_dir:,opt:,ldopt:,plugin_dir:,plugins_dir: \
 -- "$@"`
    if test $? -ne 0; then
        usage
        exit 1
    fi
    eval set -- "$args"
else
    echo "Warning getopt failed and argument parsing is limited. Please consider installing GNU getopt." >&2
    no_parsing=true
    true
fi


include_directories=
definitions=
linker_libraries=
linker_directories=
exec_prefix=
compiler_options=
plugin_directories=
plugins_directories=
sources_directories=
tmp_directory=false
build_directory=.siconos
clean_build=false

while test $# -gt 0 ; do
    case "$1" in
        -a) all_srcs=true;;
        --build_dir) with_arg $@; shift;
            case :$1 in 
                :/tmp) tmp_directory=true; build_directory=$1;;
                :*) build_directory=$1;;
            esac;;
        --clean_build) clean_build=true;;
        --clean|-c) make_args=clean; clean_build=true; exec=false;;
        -D) with_arg $@; shift; definitions="$definitions $1";;
        -g) definitions="$definitions CMAKE_BUILD_TYPE=Debug";;
        -h|-help) usage; exit 0;;
        --noexec) exec=false;;
        --nocomp) comp=false;; 
        -I) with_arg $@; shift; 
            case :$1,:$include_directories in
                :*,:) include_directories=$1;;
                :*,:*) include_directories="$include_directories;$1";;
            esac;;
        -j) with_arg $@; shift; 
            make_args="$make_args -j $1";;
        -l) with_arg $@; shift; 
            case :$1,:$linker_libraries in
                :*,:) linker_libraries=$1;;
                :*,:*) linker_libraries="$linker_libraries;$1";;
            esac;;
        -L) with_arg $@; shift; 
            case :$1,:$linker_directories in
                :*,:) linker_directories=$1;;
                :*,:*) linker_directories="$linker_directories;$1";;
            esac;;
        -P) with_arg $@; shift; exec_prefix=$1;;
        -O) with_arg $@; shift; 
            case :$1,:$compiler_options in
                :*,:) compiler_options=-O$1;;
                :*,:*) compiler_options="$compiler_options;-O$1";;
            esac;;
        --opt) with_arg $@; shift;
            case :$1,:$compiler_options in
                :*,:) compiler_options=$1;;
                :*,:*) compiler_options="$compiler_options;$1";;
            esac;;
        --ldopt) with_arg $@; shift;
            case :$1,:$linker_options in
                :*,:) linker_options=$1;;
                :*,:*) linker_options="$linker_options;$1";;
            esac;;
        --plugin_dir) with_arg $@; shift
            case :$1,:$plugin_directories in
                :*,:) plugin_directories=$1;;
                :*,:*) plugin_directories="$plugin_directories;$1";;
            esac;;
        --plugins_dir) with_arg $@; shift
            case :$1,:$plugins_directories in
                :*,:) plugins_directories=$1;;
                :*,:*) plugins_directories="$plugins_directories;$1";;
            esac;;
        --src_dir) with_arg $@; shift
            all_srcs=true
            case :$1,:$sources_directories in
                :*,:) sources_directories=$1;;
                :*,:*) sources_directories="$sources_directories;$1";;
            esac;;
        -v) make_args="$make_args VERBOSE=1";;
        --) shift; break;;
        *) case $no_parsing in true) break;; *) usage; exit 1;; esac
    esac
    shift
done

# build directory setup : ./.siconos/build is the default
if test $tmp_directory = true; then
    build_directory=`mktemp -d -p $build_directory siconosXXXXX`
fi

SICONOS_BUILD_DIR=${SICONOS_BUILD_DIR:-$build_directory}

if test ! -d ${SICONOS_BUILD_DIR}; then
    mkdir -p ${SICONOS_BUILD_DIR} 
fi

cd ${SICONOS_BUILD_DIR} || { 
    $myname: Cannot change directory to ${SICONOS_BUILD_DIR}
    exit 1
}

if test ! "$make_args" = "clean"; then

    case :$1,:$sources_directories in
        :,:) usage; exit 1;;
        :/*,*) main_source=$1;;
        :*,*) main_source=$call_pwd/$1;;
    esac

    shift

    case :$plugin_directories in
        /*|:);;
        *) plugin_directories=$call_pwd/$plugin_directories;;
    esac

    case :$plugins_directories in
        /*|:);;
        *) plugins_directories=$call_pwd/$plugins_directories;;
    esac

    if test -z "$sources_directories"; then 
        if test "$all_srcs" = "true"; then
            sources_directories=`dirname $main_source`
        fi
    fi

    if test ! -z "$main_source"; then
        exe=`expr "\`basename $main_source\`" : "\(.*\)\..*"`
    else
        exe=`basename $sources_directory`
    fi

    case :$ext_plugin_source,:$plugins_sources in
        :,:*);;
        :*,:) plugins_sources=$ext_plugin_source;;
        :*,:*) plugins_sources="$ext_plugin_source;$ext_plugin_source";;
    esac

    for d in $definitions; do
        case $d in
            *=*) 
                extra_defs="$extra_defs -D$d" 
                ndef=`expr "$d" : "\(.*\)=.*"`
                all_extra_defs="$all_extra_defs;$ndef";;
            *)  extra_defs="$extra_defs -D$d=1"
                all_extra_defs="$all_extra_defs;$d";;
        esac
    done

    if [ $comp = true ]; then
        
        if ! cmake $KERNEL_PREFIX/share/siconos-kernel/ \
            -DCALL_PWD=$call_pwd \
            -DMAIN_SOURCE=$main_source \
            -DPLUGINS_SOURCES=$plugins_sources \
            -DPLUGINS_DIRECTORIES=$plugins_directories \
            -DPLUGIN_DIRECTORIES=$plugin_directories \
            -DSOURCES_DIRECTORIES=$sources_directories \
            -DCOMPILER_OPTIONS=$compiler_options \
            -DLINKER_OPTIONS=$linker_options \
            -DLINKER_DIRECTORIES=$linker_directories \
            -DLINKER_LIBRARIES=$linker_libraries \
            -DALL_EXTRA_DEFINITIONS=$all_extra_defs \
            $extra_defs; then
            echo "$myname: $exe build configuration failed" >&2
            exit 1
        fi
    fi
fi

if [ $comp = true ]; then
    if test -f ./Makefile; then
        make $make_args || exit 1
        case $make_args in 
            clean);;
            *) make install || exit 1;;
        esac
    else
        echo "$myname: nothing to clean" 
    fi
fi

if test $clean_build = true; then
    if test -f Makefile; then
        make clean
    fi
    rm -f CMakeCache.txt
    rm -rf CMakeFiles
    rm -f Makefile
    rm -f cmake_install.cmake
    rm -f install_manifest.txt
    cd $call_pwd
    rmdir $build_directory
fi

if test $exec = true; then
    cd $call_pwd
    eval LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NUMERICS_PREFIX/lib:$KERNEL_PREFIX/lib:$KERNEL_PREFIX/share/siconos-kernel:. $exec_prefix ./$exe $@
fi
