This is a brain dump on how to compile Siconos from Linux with Visual Studio

## Toolchain

The wrapmsvc project has some nice info on how to use Visual Studio from Linux
http://code.google.com/p/wrapmsvc/
Get a release tarball of checkout the svn. Follow the README to install the win7 SDK
and the wrapper.

On some linux distribution, you may have to export some CFLAGS in order to link with the 32-bits libs,
since the binaries are built using "-m32". For instance this works on Ubuntu 12.04:
CFLAGS='-L/usr/lib/i386-linux-gnu/wine/' ./build.sh  ../msvc/bin/

For the Fortran compiler and some external dependencies, you will need the mxe toolchain
See README-mingw on how to install it. You can also install Python, numpy, ...

There is an ABI compatibility between GCC and Visual Studio for C (VS can also link to fortran
libraries compiled with GCC). But with C++, they are incompatible.
So you have to compile cppunit with VS. First get a compatible version here:
http://blogs.powersoft.ca/erict/archive/2012/02/21/cppunit-in-vs2010ndashwith-a-sample.aspx
go in src/cppunit/ and build it with
wine /path/to/wine/dir/drive_c/windows/Microsoft.NET/Framework/v4.0.30319/MSBuild.exe cppunit.vcxproj /p:PlatformToolset=Windows7.1SDK
It will create a static lib in the Debug directory.
If you want to build Siconos in Release mode, you also have to build cppunit in Release. You can
then use the switch "/p:Configuration=Release;PlatformToolset=Windows7.1SDK"

Another big issue is that you cannot put the include dir from the mxe toochain in the include path.
In this case it will mix the header from the mingw std lib and those from VS, resulting in a mess.
So you have to copy those in a separate dir and give it to cmake (see the build-vc.sh script).

For the LAPACK detection to work, you need to provide an implementation for some C99 function used in lapack
The simplest way to do that is to compile Numerics/src/utils/SiconosCompat.c into an archive and give the location
of this archive to cmake via -DEXTRA_LAPACK_LIB=...

## Bugs

* There is an issue with some operator test (especially the prod test). A debug c++ assert fails !
This might be a bug in ublas or in the std VS C++ library
* VS < 2013 does not support C99 ... but the C++ compiler support ISO C++, which contains a subset of C99. Fortunately,
we only use this subset, so we have to use the C++ compiler for Numerics. As a site effect, the C calling convention
is not respected. In most header if __cplusplus is defined, we declare function as extern C, which is not correct
in this case. We then have to prevent this if Numerics is build using a C++ compiler. Hence we create a new macro
BUILD_AS_CPP. But it does not always work as expected ... When building Numerics, we have to force its definition,
despite been defined in NumericsConfig.h
* Many failures in Release mode

## TODO

* Mark imported function as __declspec(dllimport) (especially LA.h, exported function in Numerics, Kernel)
* See if we still comply to the GPL (http://www.gnu.org/licenses/gpl-faq.html#WindowsRuntimeAndGPL)
* Fix bugs
* Try to build it natively on Windows
