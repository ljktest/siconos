#!/usr/bin/env python

# documentation publication on http://siconos.gforge.inria.fr

# ./publish [-r<svn rev>] [-u <gforge_user>] [-d]

# -r followed by a revision number 
# -u followed by gforge login
# -d : publish devel version

# example:

# to update site with current documentation
# ./publish -u bremond -d

# to update site with 3.4.0 (=rev 3194)documentation
# ./publish -r3194 -u bremond

# Note: some rsync error may occurs due to some files modes on remote site


import sys, os, shutil, tempfile, re
from subprocess import check_call
from getpass import getuser
from getopt import gnu_getopt, GetoptError

#
# exit only if not imported
#
def stop(n):
    import __main__ as main
   
    if hasattr(main, '__file__'):
        sys.exit(n)
    else:
        raise Exception('stop',n)

# a tempdir class to be used like 'with TempDir() as tmpdir:'
# i.e. the temp directory is erased ad the end of the block
class WorkDir():
    def __init__(self,prefix,tmp=False):
        self.prefix = prefix
        self.tmp = tmp

    def __enter__(self):
        # just create prefix 
        if not os.path.exists(self.prefix):
            os.makedirs(self.prefix)

        # The user of mkdtemp() is responsible for deleting the
        # temporary directory and its contents when done with it.
        if self.tmp:
            self.name = tempfile.mkdtemp(prefix=self.prefix)
            return self.name
        else:
            return self.prefix
        
    def __exit__(self, type, value, traceback):
        # So we remove directory here
        if self.tmp:
            shutil.rmtree(self.name)
        else:
            pass

devel = False
user = getuser()

mods = [ 'Numerics', 'Kernel', 'Front-End', 'IO', 'Examples', 'Docs' ]

revision = '-rHEAD'

try:
    opts, args = gnu_getopt(sys.argv[1:], 'r:u:d',[])

    for o, a in opts:
        if o == '-r':
            revision = '-r{0}'.format(a)

        elif o == '-u':
            user = a

        elif o == '-d':
            devel = True

except GetoptError, err:
        # print help information and exit:
        sys.stderr.write(str(err)) # will print something like 'option
                                   # -a not recognized'
        usage()
        stop(2)


class pathdict(dict):
    def __init__(self, prefix):
        self.prefix = prefix
        return dict(self).__init__()
        
    def __getitem__(self,k):
        if not os.path.exists(os.path.join(self.prefix,k)):
            os.makedirs(os.path.join(self.prefix,k))
        return os.path.join(self.prefix,dict(self).__getitem__(k))
            

def get_version(path):

    with open(os.path.join(path,'CMakeLists.txt')) as cmakefile:
        cmakefile_as_str = cmakefile.read()
        vmatch = re.findall(r"SICONOS_PROJECT\((\w+)\s+(\d+)\s+(\d+)\s+(\d+).*\)", cmakefile_as_str)
        if len(vmatch) > 0:
            return '{0}.{1}.{2}'.format(vmatch[0][1],vmatch[0][2],vmatch[0][3])
        else:
            return None

with WorkDir('/tmp/{0}/publish'.format(getuser())) as workdir:

    builddir = pathdict(os.path.join(workdir,'build'))
    srcdir = pathdict(os.path.join(workdir,'src'))   

    for mod in mods:

        builddir[mod] = mod
        srcdir[mod] = mod

        # get sources
        check_call(["svn", "co", revision, "svn+ssh://{0}@scm.gforge.inria.fr/svnroot/siconos/trunk/{1}".format(user,mod)], cwd=srcdir.prefix)

        if not devel:
            version = get_version(srcdir[mod])
            assert(version is not None)

        else:
            version = ''

        # make documentation
        check_call(["cmake", srcdir[mod], "-DWITH_DOCUMENTATION=TRUE"],cwd=builddir[mod])
        check_call(["make", "doc"], cwd=builddir[mod])

    # second pass for make doc
    for mod in mods:

        check_call(["make", "doc"], cwd=builddir[mod])

    # change local modes
    for root,dirs,files in os.walk(os.path.join(builddir.prefix, 'GeneratedDocs')):
        for d in dirs:
            os.chmod(os.path.join(root,d),0o775)
        for f in files:
            os.chmod(os.path.join(root,f),0o664)

    os.chmod(os.path.join(builddir.prefix,'GeneratedDocs'), 0o775)

    # upload
    check_call(["rsync", "-rlvp", os.path.join(builddir.prefix,'GeneratedDocs/'),'{0}@scm.gforge.inria.fr:/home/groups/siconos/htdocs/{1}'.format(user,version)])
