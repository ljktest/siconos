/* Siconos is a program dedicated to modeling, simulation and control
 * of non smooth dynamical systems.
 *
 * Copyright 2016 INRIA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>
#include "NonSmoothDrivers.h"
#include "GAMSlink.h"

#include "frictionContact_test_function.h"


int main(void)
{
  int info =0 ;

  char filename[] = "./data/@TEST_DATA@";
  printf("Test on %s\n",filename);

  FILE * finput  =  fopen(filename,"r");
  SolverOptions * options = (SolverOptions *) malloc(sizeof(SolverOptions));
  double testTolerance = @TEST_TOLERANCE@;
  int testInternalSolver = @TEST_INTERNAL_SOLVER@;
  info=fc3d_setDefaultSolverOptions(options,@TEST_SOLVER@);
  if (testTolerance > 0.)
  {
    options->dparam[0]=@TEST_TOLERANCE@;
    options->iparam[0]=@TEST_MAXITER@;
  }

  if (testInternalSolver)
  {
    options->internalSolvers->solverId=@TEST_INTERNAL_SOLVER@;
    options->internalSolvers->dparam[0]=@TEST_INTERNAL_SOLVER_TOLERANCE@;
    options->internalSolvers->iparam[0]=@TEST_INTERNAL_SOLVER_MAXITER@;
  }

#ifdef HAVE_GAMS_C_API
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic ignored  "-Wtautological-compare"
#endif /*  __clang__  */
  if ((@TEST_SOLVER@ == SICONOS_FRICTION_3D_GAMS_PATH) || (@TEST_SOLVER@ == SICONOS_FRICTION_3D_GAMS_PATHVI)
      || (@TEST_SOLVER@ == SICONOS_FRICTION_3D_GAMS_LCP_PATH) || (@TEST_SOLVER@ == SICONOS_FRICTION_3D_GAMS_LCP_PATHVI))
  {
    assert(options->solverParameters);
    SN_GAMSparams* GP = (SN_GAMSparams*)options->solverParameters;
    GP->model_dir = GAMS_MODELS_SOURCE_DIR;
    GP->filename = "@TEST_DATA@";
    frictionContact_test_gams_opts(GP, @TEST_SOLVER@);
  }
#ifdef __clang__
#pragma clang diagnostic pop
#endif /* __clang__  */
#endif

  info = frictionContact_test_function(finput,options);
  deleteSolverOptions(options);
  free(options);

  fclose(finput);
  printf("\nEnd of test on %s\n", filename);
  return info;
}
