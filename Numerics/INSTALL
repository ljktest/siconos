# Siconos-Numerics, Copyright INRIA 2005-2011
# Siconos is a program dedicated to modeling, simulation and control
# of non smooth dynamical systems.	
# Siconos is a free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Siconos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Siconos; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Contact: Vincent ACARY vincent.acary@inrialpes.fr 
#	

--------------------------------------------------------------------------------
 How to load and install Numerics:
--------------------------------------------------------------------------------

---++ Required external libraries

   * ATLAS or BLAS/LAPACK

---++ Getting the sources

   * Through the svn server (acess required)
       svn checkout svn+ssh://user@scm.gforge.inria.fr/svn/siconos
       for more explanation see http://gforge.inria.fr/scm/?group_id=9

   * Download the source packages on the Gforge   

---++ INSTALL with cmake

The command `cmake' is needed (http://www.cmake.org/). The cmake
version must be >= 2.8.

The compilation is done out of the source directory:

   * create a build directory <build>
   * cd <build>
   * cmake <path of the source directory> [CMAKE OPTIONS]
   * make [MAKE OPTIONS]
   * make test   (if -DWITH_TESTING=ON is in CMAKE OPTIONS)
   * make install

Some CMAKE OPTIONS that may be usefull:

   * to find include headers in specific directories :
    -DCMAKE_INCLUDE_PATH=<DIR>

     use a semicolon to separate directories (and not a colon!!):
    -DCMAKE_INCLUDE_PATH="<DIR1>;<DIR2>;.."

   * to find some libraries in specific directories :
    -DCMAKE_LIBRARY_PATH=<DIR>

     for several directories, see above.        

   * to build a debug library (compilation with -g) :
    -DCMAKE_BUILD_TYPE=Debug

   * to build an optimized library (-O3 -DNDEBUG) (this is the
    default): -DCMAKE_BUILD_TYPE=Release

   * to build Global Alart&Curnier solver with MUMPS 
     -DWITH_MUMPS=TRUE
     (if mumps library is not in a standard place, see
      CMAKE_INCLUDE_PATH & CMAKE_LIBRARY_PATH above)

   * to include the build of the tests suites and enable a make test
     target
     -DWITH_TESTING=ON

   * to build the documentation
     -DWITH_DOCUMENTATION=TRUE 
     the documentation is generated under GeneratedDocs at the level
     of the build directory

   * to build the documentation some where
     -DWITH_DOCUMENTATION=TRUE -DDOXYGEN_OUPUT=/some/where
     (you may have to create the directory /some/where/Tags)

   * to see cmake state : -DPRINT_ENV=1

   * to print a cmake variable : -DPRINT_VAR=VAR_NAME

Some MAKE OPTIONS that may be usefull:
   * to see make command as executed : VERBOSE=1

      

---++ Note on MacOS and gfortran

      gfortran is not packaged in Apple Xcode. You need to install it
      from a port system such as fink, MacPort or to download a binary
      version at http://hpc.sourceforge.net/.

      For snow leopard (MacOSX>= 10.6), the only possible compilation
      is in i386 mode. For a complete compilation in x86_64 mode, we
      strongly recommend fully comptatible gfortran of the "R"
      software http://r.research.att.com/tools/
