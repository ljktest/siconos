# -*- cmake -*-
# This is the test cmake configuration
# built from @CMAKE_SOURCE_DIR@/cmake/CMakeListsForTests.cmake.in 
SET(SOURCE_DIR @CMAKE_CURRENT_SOURCE_DIR@/@_CURRENT_TEST_DIRECTORY@)

# Note Franck : it seems that all the following is already done during BEGIN_TEST call, is it? --> I comment ...
#FILE(GLOB TESTS_XML ${SOURCE_DIR}/*.xml)
#FOREACH(_F ${TESTS_XML})
#  GET_FILENAME_COMPONENT(TEST_XML ${_F} NAME)
  #  MESSAGE(STATUS "Found xml file : ${_F}")
  #  MESSAGE(STATUS "Configuring file : ${CMAKE_CURRENT_BINARY_DIR}/${TEST_XML}")
#  CONFIGURE_FILE(${_F} ${CMAKE_CURRENT_BINARY_DIR}/${TEST_XML}  @COPYONLY)
#ENDFOREACH(_F ${TESTS_XML})
FILE(GLOB TESTS_REF ${SOURCE_DIR}/*.ref)
FOREACH(_F ${TESTS_REF})
  GET_FILENAME_COMPONENT(TEST_REF ${_F} NAME)
  MESSAGE(STATUS "Found ref file : ${_F}")
  MESSAGE(STATUS "Configuring file : ${CMAKE_CURRENT_BINARY_DIR}/${TEST_REF}")
  CONFIGURE_FILE(${_F} ${CMAKE_CURRENT_BINARY_DIR}/${TEST_REF}  @COPYONLY)
ENDFOREACH(_F ${TESTS_REF})

IF(CMAKE_SYSTEM_NAME MATCHES Windows)
  SET(EXE_EXT ".exe")
ELSE()
  SET(EXE_EXT)
ENDIF()

# For some environment variables (LD_LIBRARY_PATH, DYLD_LIBRARY_PATH, Path)
GET_FILENAME_COMPONENT(SiconosNumerics_PATH "${SiconosNumerics_LIBRARY}" PATH)
set(LIBFORTests ${SiconosNumerics_PATH}:${CMAKE_BINARY_DIR}/src/plugin/test)

FOREACH(_EXE ${_EXE_LIST_${_CURRENT_TEST_DIRECTORY}})
  MESSAGE(STATUS "Adding test suite ${_CURRENT_TEST_DIRECTORY}/${_EXE}")
  SET(EXECUTABLE_OUTPUT_PATH @CMAKE_CURRENT_BINARY_DIR@/@_CURRENT_TEST_DIRECTORY@)
  
  FOREACH(_D ${${PROJECT_NAME}_INCLUDE_DIRECTORIES})
    INCLUDE_DIRECTORIES(${_D})
  ENDFOREACH(_D ${${PROJECT_NAME}_INCLUDE_DIRECTORIES}) 
  FOREACH(_D ${${PROJECT_NAME}_LINK_DIRECTORIES})
    LINK_DIRECTORIES(${_D})
  ENDFOREACH(_D ${${PROJECT_NAME}_LINK_DIRECTORIES})
  
  # a wrapper around test
  IF(TEST_WRAP)
    ADD_EXECUTABLE(${_EXE}.ldwrap ${_EXE}.ldwrap.c)
  ENDIF(TEST_WRAP)
  
  IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ADD_EXECUTABLE(${_EXE} WIN32 ${${_EXE}_FSOURCES})
    SET_TARGET_PROPERTIES(${_EXE} PROPERTIES COMPILE_FLAGS "-DEMULATOR=\\\"wine\\\" -DWRAPPER=\\\"\\\"")
  ELSE()
    ADD_EXECUTABLE(${_EXE} ${${_EXE}_FSOURCES})
    IF(TEST_WRAP)
      SET_TARGET_PROPERTIES(${_EXE} PROPERTIES COMPILE_FLAGS "-DEMULATOR=\\\"\\\" -DWRAPPER=\\\".ldwrap\\\"")
    ELSE(TEST_WRAP)
      SET_TARGET_PROPERTIES(${_EXE} PROPERTIES COMPILE_FLAGS "-DEMULATOR=\\\"\\\" -DWRAPPER=\\\"\\\"")
    ENDIF(TEST_WRAP)
  ENDIF()

  #Use the proper linker for the proper language
  # fortran -> gfortran; {c,cpp} -> link.exe
  IF(MSVC)
    SET(${_EXE}_FORTRAN FALSE)
    FOREACH(_TF ${${_EXE}_FSOURCES})
      IF(${_TF} MATCHES "[.]c$")
        set_source_files_properties(${_TF} PROPERTIES LANGUAGE CXX)
      ENDIF(${_TF} MATCHES "[.]c$")
      IF(${_TF} MATCHES "[.]f$")
        SET(${_EXE}_FORTRAN TRUE)
      ENDIF()
    ENDFOREACH(_TF ${${_EXE}_FSOURCES})
    IF(${_EXE}_FORTRAN)
      SET_TARGET_PROPERTIES(${_EXE} PROPERTIES LINK_FLAGS "-Wl,--as-needed")
      SET(CMAKE_EXE_LINKER_FLAGS "")
      SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "")
      SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "")
      SET(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "")
    ENDIF(${_EXE}_FORTRAN)
  ENDIF(MSVC)

  # project name shared or static lib
  IF(${PROJECT_NAME}_SHARED_LIB_LINK)
    ADD_DEPENDENCIES(${_EXE} ${PROJECT_NAME}_shared)
    TARGET_LINK_LIBRARIES(${_EXE} ${${PROJECT_NAME}_SHARED_LIB_LINK})
  ELSE(${PROJECT_NAME}_SHARED_LIB_LINK)
    IF(${PROJECT_NAME}_STATIC_LIB)
      ADD_DEPENDENCIES(${_EXE} ${PROJECT_NAME}_static)
      TARGET_LINK_LIBRARIES(${_EXE} ${${PROJECT_NAME}_STATIC_LIB})
    ENDIF(${PROJECT_NAME}_STATIC_LIB)
  ENDIF(${PROJECT_NAME}_SHARED_LIB_LINK)
  FOREACH(_L ${${PROJECT_NAME}_LINK_LIBRARIES})
    IF(NOT ${_EXE}_FORTRAN)
      TARGET_LINK_LIBRARIES(${_EXE} ${_L})
    ELSE()
      # Hack to remove unneeded library
      IF(NOT (${_L} MATCHES "libgcc" OR ${_L} MATCHES "libgfortran"))
        TARGET_LINK_LIBRARIES(${_EXE} ${_L})
      ENDIF()
    ENDIF()
  ENDFOREACH(_L ${${PROJECT_NAME}_TARGET_LINK_LIBRARIES})

  FOREACH(_L ${TEST_LIBS})
    TARGET_LINK_LIBRARIES(${_EXE} ${_L})
  ENDFOREACH()
  FOREACH(_D ${TEST_INCLUDE_DIR})
    include_directories(${_D})
  ENDFOREACH()

  IF(CPPUNIT_FOUND)

    # each test in the test suite becomes a cmake test
    IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
      ADD_CUSTOM_COMMAND(TARGET ${_EXE}
        POST_BUILD
        COMMAND env "Path=\"@CMAKE_BINARY_DIR@/src;@SICONOS_LIB_PATH@\"" wine ARGS ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}${EXE_EXT}
        --cdash-prepare ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}${EXE_EXT} > ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}.cmake
        COMMENT "Generating ${_EXE}.cmake")
    ELSE(CROSSCOMPILING_LINUX_TO_WINDOWS)
      ADD_CUSTOM_COMMAND(TARGET ${_EXE}
        POST_BUILD
        COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}${EXE_EXT}
        ARGS --cdash-prepare ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}${EXE_EXT} > ${CMAKE_CURRENT_BINARY_DIR}/${_EXE}.cmake
        COMMENT "Generating ${_EXE}.cmake")
    ENDIF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    
  
    FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "# siconos test config file\n")
    FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "MACRO(ADD_CPPUNIT_TEST)\n")
    FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "  ADD_TEST(\${ARGV})\n")
    FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "  SET(_EXE \${ARGV0})\n")
    IF(APPLE)
      FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "  SET_TESTS_PROPERTIES(\${_EXE} PROPERTIES ENVIRONMENT \"DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}:${LIBFORTests}\")\n")
    ELSEIF(CROSSCOMPILING_LINUX_TO_WINDOWS OR WINDOWS)
      FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "  SET_TESTS_PROPERTIES(\${_EXE} PROPERTIES ENVIRONMENT \"Path=${CMAKE_BINARY_DIR}/src/plugin/test\;${SiconosNumerics_PATH}\")\n")
    ELSE() # unix
      FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "  SET_TESTS_PROPERTIES(\${_EXE} PROPERTIES ENVIRONMENT \"LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}:${LIBFORTests}\")\n")
    ENDIF()
    
    FILE(APPEND ${CMAKE_CURRENT_BINARY_DIR}/SiconosTestConfig.cmake "ENDMACRO(ADD_CPPUNIT_TEST)\n")

    SET_DIRECTORY_PROPERTIES(PROPERTIES TEST_INCLUDE_FILE
      "${CMAKE_CURRENT_BINARY_DIR}/${_EXE}.cmake")
    
  ELSE(CPPUNIT_FOUND)
    
    IF(TEST_WRAP)
      IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} wine ${_EXE}.ldwrap${EXE_EXT})
      ELSE(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} ${_EXE}.ldwrap${EXE_EXT})
      ENDIF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ELSE(TEST_WRAP)
      IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} wine ${_EXE}${EXE_EXT})
      ELSE(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} ${_EXE}${EXE_EXT})
      ENDIF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ENDIF(TEST_WRAP)
    
    SET_TESTS_PROPERTIES(${_EXE} PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;test unsucceeded")

    set_tests_properties(${_EXE} PROPERTIES ENVIRONMENT LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}:${LIBFORTests})
    if(CROSSCOMPILING_LINUX_TO_WINDOWS)
      set_tests_properties(${_EXE} PROPERTIES ENVIRONMENT "Path=@CMAKE_BINARY_DIR@/src;@SICONOS_LIB_PATH@")
    endif()
    if(APPLE)
      set_tests_properties(${_EXE} PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}:${LIBFORTests})
    endif()
    
    IF(${_EXE}_PROPERTIES)
      SET_TESTS_PROPERTIES(${_EXE} PROPERTIES ${${_EXE}_PROPERTIES})
    ENDIF(${_EXE}_PROPERTIES)
  
  ENDIF(CPPUNIT_FOUND)

ENDFOREACH(_EXE ${_EXE_LIST_${_CURRENT_TEST_DIRECTORY}})
