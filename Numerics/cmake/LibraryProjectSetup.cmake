#
# static and shared library setup
#
# input:
#
# <PROJECT_NAME>_SRCS : [optional] Project SRCS on per files basis
# <PROJECT_NAME>_LIBS_NAME : [optional] libraries name. if it is empty the libs name are the same as PROJECT_NAME.
# <PROJECT_NAME>_DIRS : sources directories
# <PROJECT_NAME>_Unstable_SRCS : built only if -DUNSTABLE=ON
# <PROJECT_NAME>_VERSION : version of the library
# <PROJECT_NAME>_HDRS : installation headers  (if none all headers)
# <PROJECT_NAME>_INSTALL_INCLUDE_DIR : where to install headers
# <PROJECT_NAME>_INSTALL_LIB_DIR     : where to install the build libraries
# <PROJECT_NAME>_SOURCE_FILE_EXTENSIONS may contains the wanted sources extensions (default: all extensions)
# <PROJECT_NAME>_LINKER_LANGUAGE : the language used to link the whole librarie

MACRO(LIBRARY_PROJECT_SETUP)

  MESSAGE(STATUS "")
  MESSAGE(STATUS "Setting up ${PROJECT_NAME} library build")

  #+RPG add a reset of _ALL_EXTS
  SET(_ALL_EXTS)
  SET(_ALL_DIRS ${${PROJECT_NAME}_DIRS})
  IF(NOT ${PROJECT_NAME}_SOURCE_FILE_EXTENSIONS)
    # all extensions we know (should be done only with the project languages)
    SET(_ALL_EXTS)
    FOREACH(_EXT ${CMAKE_CXX_SOURCE_FILE_EXTENSIONS} ${CMAKE_C_SOURCE_FILE_EXTENSIONS} ${CMAKE_Fortran_SOURCE_FILE_EXTENSIONS} ${CMAKE_Java_SOURCE_FILE_EXTENSIONS} ${CMAKE_RC_SOURCE_FILE_EXTENSIONS})
      LIST(APPEND _ALL_EXTS *.${_EXT})
    ENDFOREACH(_EXT ${CMAKE_CXX_SOURCE_FILE_EXTENSIONS} ${CMAKE_C_SOURCE_FILE_EXTENSIONS} ${CMAKE_Fortran_SOURCE_FILE_EXTENSIONS} ${CMAKE_Java_SOURCE_FILE_EXTENSIONS} ${CMAKE_RC_SOURCE_FILE_EXTENSIONS})
  ELSE(NOT ${PROJECT_NAME}_SOURCE_FILE_EXTENSIONS)
    # specified extensions
    FOREACH(_EXT ${${PROJECT_NAME}_SOURCE_FILE_EXTENSIONS})
      LIST(APPEND _ALL_EXTS *.${_EXT})
    ENDFOREACH(_EXT ${${PROJECT_NAME}_SOURCE_FILE_EXTENSIONS})
  ENDIF(NOT ${PROJECT_NAME}_SOURCE_FILE_EXTENSIONS)
  
  SET(_ALL_FILES)
  
  #+++RPG add the possiblity to add files with PROJECT_NAME_SRCS and not automatically
  IF(${PROJECT_NAME}_SRCS) 
    MESSAGE(STATUS "Sources files manually with var PROJECT_NAME_SRCS")
    FOREACH(_FILE ${${PROJECT_NAME}_SRCS})
      FILE(GLOB _GFILE ${_FILE})
      IF(_GFILE)
        LIST(APPEND _ALL_FILES ${_GFILE})
      ELSE(_GFILE)
        MESSAGE(STATUS "WARNING : file NOT FOUND : ${_FILE}")
      ENDIF(_GFILE)
    ENDFOREACH(_FILE ${${PROJECT_NAME}_SRCS})
  ELSE(${PROJECT_NAME}_SRCS)
    

    FOREACH(_DIR ${_ALL_DIRS})
      SET(_DIR_FILES)
      FOREACH(_EXT ${_ALL_EXTS})
        FILE(GLOB _DIR_FILES_EXT ${_DIR}/${_EXT})
        IF(_DIR_FILES_EXT)
          LIST(APPEND _DIR_FILES ${_DIR_FILES_EXT})
        ENDIF(_DIR_FILES_EXT)
      ENDFOREACH(_EXT ${_ALL_EXTS})
      IF(_DIR_FILES)
        FOREACH(_F ${_DIR_FILES})
          IF(NOT ${_F}_T)
            SET(${_F}_T T)
            LIST(APPEND _ALL_FILES ${_F})
          ENDIF(NOT ${_F}_T)
        ENDFOREACH(_F ${_DIR_FILES})
      ENDIF(_DIR_FILES)
    ENDFOREACH(_DIR ${_ALL_DIRS})
  ENDIF(${PROJECT_NAME}_SRCS)
  #
  # headers
  #
  IF(NOT ${PROJECT_NAME}_HDRS)
    FOREACH(_DIR ${_ALL_DIRS})
      FILE(GLOB _HDRS  ${_DIR}/*.h ${_DIR}/*.hpp)
      IF(_HDRS)
        LIST(APPEND ${PROJECT_NAME}_HDRS ${_HDRS})
      ENDIF(_HDRS)
    ENDFOREACH(_DIR ${_ALL_DIRS})
  ENDIF(NOT ${PROJECT_NAME}_HDRS)
  
  #
  # Unstable sources
  #
  IF(NOT UNSTABLE)
    IF(${PROJECT_NAME}_Unstable_SRCS)
      MESSAGE(STATUS "Some unstables sources files are going to be excluded")
      MESSAGE(STATUS "To configure an unstable build, run : `cmake -DUNSTABLE=ON .'")
      FOREACH(_FILE ${${PROJECT_NAME}_Unstable_SRCS})
        FILE(GLOB _GFILE ${_FILE})
        IF(_GFILE)
          MESSAGE(STATUS "excluded : ${_GFILE}")
          LIST(REMOVE_ITEM _ALL_FILES ${_GFILE})
        ELSE(_GFILE)
          MESSAGE(STATUS "WARNING : Unstable file NOT FOUND : ${_FILE}")
        ENDIF(_GFILE)
      ENDFOREACH(_FILE ${${PROJECT_NAME}_Unstable_SRCS})
    ENDIF(${PROJECT_NAME}_Unstable_SRCS)
  ENDIF(NOT UNSTABLE)
  
  SET(${PROJECT_NAME}_SRCS ${_ALL_FILES})
  
  INCLUDE_DIRECTORIES(${_ALL_DIRS})

  #
  # On Mac OS : 
  #
  IF(APPLE)
    # 1 : do not use defaults system libraries (i.e not fortran lapack lib but atlas/lapack lib)
    SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,-search_paths_first,-single_module")
    SET(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -Wl,-search_paths_first")
    SET(CMAKE_SHARED_LINKER_FLAGS "-read_only_relocs suppress")
    IF(FORTRAN_COMPILER_LIB_DIRECTORIES)
      # 2 : the runtime libraries of the fortran compiler are needed
      REMEMBER_LINK_DIRECTORIES("${FORTRAN_COMPILER_LIB_DIRECTORIES}")
    ENDIF(FORTRAN_COMPILER_LIB_DIRECTORIES)
  ENDIF(APPLE)


  IF(BUILD_STATIC_LIBS)
    ADD_LIBRARY(${PROJECT_NAME}_static  STATIC ${_ALL_FILES})
  ENDIF(BUILD_STATIC_LIBS)

  IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(${PROJECT_NAME}_shared  SHARED ${_ALL_FILES})
  ENDIF(BUILD_SHARED_LIBS)

  IF(APPLE)
    IF(FORTRAN_LIBRARIES)
     IF(BUILD_STATIC_LIBS)
       TARGET_LINK_LIBRARIES(${PROJECT_NAME}_static ${FORTRAN_LIBRARIES})
     ENDIF(BUILD_STATIC_LIBS)
     IF(BUILD_SHARED_LIBS)
        TARGET_LINK_LIBRARIES(${PROJECT_NAME}_shared ${FORTRAN_LIBRARIES})
      ENDIF(BUILD_SHARED_LIBS)
    ENDIF(FORTRAN_LIBRARIES)
  ENDIF(APPLE)

  APPEND_Fortran_FLAGS("-w")

  IF(BUILD_STATIC_LIBS)
  SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES 
    OUTPUT_NAME "${PROJECT_NAME}" 
    VERSION "${${PROJECT_NAME}_VERSION}" 
    CLEAN_DIRECT_OUTPUT 1 # no clobbering
    LINKER_LANGUAGE ${${PROJECT_NAME}_LINKER_LANGUAGE})
   ENDIF(BUILD_STATIC_LIBS)

  IF(BUILD_SHARED_LIBS)
    SET_TARGET_PROPERTIES(${PROJECT_NAME}_shared PROPERTIES
      OUTPUT_NAME "${PROJECT_NAME}" 
      VERSION "${${PROJECT_NAME}_VERSION}" 
      CLEAN_DIRECT_OUTPUT 1 
      LINKER_LANGUAGE ${${PROJECT_NAME}_LINKER_LANGUAGE})
  ENDIF(BUILD_SHARED_LIBS)

  IF(BUILD_STATIC_LIBS)
   TARGET_LINK_LIBRARIES(${PROJECT_NAME}_static ${${PROJECT_NAME}_LINK_LIBRARIES})
  ENDIF(BUILD_STATIC_LIBS)

  IF(BUILD_SHARED_LIBS)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_shared ${${PROJECT_NAME}_LINK_LIBRARIES})
  ENDIF(BUILD_SHARED_LIBS)

  # output in ${PROJECT_NAME}_STATIC|SHARED_LIB the path of the libraries
  GET_TARGET_PROPERTY(${PROJECT_NAME}_STATIC_LIB ${PROJECT_NAME}_static LOCATION)
 
 # just the names of the libraries
  IF(BUILD_SHARED_LIBS)
    GET_TARGET_PROPERTY(${PROJECT_NAME}_SHARED_LIB ${PROJECT_NAME}_shared LOCATION) 
    IF (${PROJECT_NAME}_LIBS_NAME)
     SET_TARGET_PROPERTIES(${PROJECT_NAME}_shared
                           PROPERTIES OUTPUT_NAME  ${${PROJECT_NAME}_LIBS_NAME})
    ENDIF(${PROJECT_NAME}_LIBS_NAME)
  ENDIF(BUILD_SHARED_LIBS)

  IF(BUILD_STATIC_LIBS)
    GET_FILENAME_COMPONENT(${PROJECT_NAME}_STATIC_LIB_NAME ${${PROJECT_NAME}_STATIC_LIB} NAME)
    IF (${PROJECT_NAME}_LIBS_NAME)
      SET_TARGET_PROPERTIES(${PROJECT_NAME}_static
                           PROPERTIES OUTPUT_NAME  ${${PROJECT_NAME}_LIBS_NAME})
    ENDIF(${PROJECT_NAME}_LIBS_NAME)
  ENDIF(BUILD_STATIC_LIBS)

  IF(BUILD_SHARED_LIBS)
    GET_FILENAME_COMPONENT(${PROJECT_NAME}_SHARED_LIB_NAME ${${PROJECT_NAME}_SHARED_LIB} NAME)
  ENDIF(BUILD_SHARED_LIBS)

  # Installation
  IF(${PROJECT_NAME}_INSTALL_LIB_DIR)
    SET(_install_lib ${${PROJECT_NAME}_INSTALL_LIB_DIR})
  ELSE(${PROJECT_NAME}_INSTALL_LIB_DIR)
    SET(_install_lib lib)
    SET(${PROJECT_NAME}_INSTALL_LIB_DIR ${_install_lib})
  ENDIF(${PROJECT_NAME}_INSTALL_LIB_DIR)

  IF(${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
    SET(_install_include ${${PROJECT_NAME}_INSTALL_INCLUDE_DIR})
  ELSE(${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
    SET(_install_include include)
    SET(${PROJECT_NAME}_INSTALL_INCLUDE_DIR ${_install_include})
  ENDIF(${PROJECT_NAME}_INSTALL_INCLUDE_DIR)
  
  INSTALL(FILES ${${PROJECT_NAME}_HDRS} DESTINATION ${_install_include})
  
  IF(BUILD_SHARED_LIBS AND BUILD_STATIC_LIBS)
    INSTALL(TARGETS 
      ${PROJECT_NAME}_static ${PROJECT_NAME}_shared 
      ARCHIVE DESTINATION ${_install_lib}
      LIBRARY DESTINATION ${_install_lib})
  ELSEIF(BUILD_SHARED_LIBS) 
    INSTALL(TARGETS 
      ${PROJECT_NAME}_shared
      ARCHIVE DESTINATION ${_install_lib}
      LIBRARY DESTINATION ${_install_lib})
  ELSEIF(BUILD_STATIC_LIBS)
    INSTALL(TARGETS 
      ${PROJECT_NAME}_static
      ARCHIVE DESTINATION ${_install_lib}
      LIBRARY DESTINATION ${_install_lib})
  ELSE(BUILD_STATIC_LIBS)
    MESSAGE("ERROR:: BUILD_SHARED_LIBS and/or BUILD_SHARED_LIBS must be set")
  ENDIF(BUILD_SHARED_LIBS AND BUILD_STATIC_LIBS)

 
  MESSAGE(STATUS "${PROJECT_NAME} library setup done")
  MESSAGE(STATUS "")

ENDMACRO(LIBRARY_PROJECT_SETUP)

