# -*- cmake -*-
# This is the test cmake configuration
# built from @CMAKE_SOURCE_DIR@/cmake/CMakeListsForTests.cmake.in 
SET(SOURCE_DIR @CMAKE_CURRENT_SOURCE_DIR@/@_CURRENT_TEST_DIRECTORY@)

FILE(GLOB TESTS_REF ${SOURCE_DIR}/*.ref)
FOREACH(_F ${TESTS_REF})
  GET_FILENAME_COMPONENT(TEST_REF ${_F} NAME)
  MESSAGE(STATUS "Found ref file : ${_F}")
  MESSAGE(STATUS "Configuring file : ${CMAKE_CURRENT_BINARY_DIR}/${TEST_REF}")
  CONFIGURE_FILE(${_F} ${CMAKE_CURRENT_BINARY_DIR}/${TEST_REF}  @COPYONLY)
ENDFOREACH(_F ${TESTS_REF})

IF(CMAKE_SYSTEM_NAME MATCHES Windows)
  SET(EXE_EXT ".exe")
ELSE()
  SET(EXE_EXT)
ENDIF()

# For some environment variables (LD_LIBRARY_PATH, DYLD_LIBRARY_PATH, Path)
GET_FILENAME_COMPONENT(SiconosNumerics_PATH "${SiconosNumerics_LIBRARY}" PATH)
set(LIBFORTests ${SiconosNumerics_PATH}:${CMAKE_BINARY_DIR}/src/plugin/test)

FOREACH(_EXE ${_EXE_LIST_${_CURRENT_TEST_DIRECTORY}})
  MESSAGE(STATUS "Adding test suite ${_CURRENT_TEST_DIRECTORY}/${_EXE}")
  SET(EXECUTABLE_OUTPUT_PATH @CMAKE_CURRENT_BINARY_DIR@/@_CURRENT_TEST_DIRECTORY@)

  FOREACH(_D ${${PROJECT_NAME}_INCLUDE_DIRECTORIES})
    INCLUDE_DIRECTORIES(${_D})
  ENDFOREACH(_D ${${PROJECT_NAME}_INCLUDE_DIRECTORIES}) 
  FOREACH(_D ${${_CURRENT_TEST_DIRECTORY}_INCLUDE_DIRECTORIES})
    INCLUDE_DIRECTORIES(${_D})
  ENDFOREACH(_D ${${_CURRENT_TEST_DIRECTORY}_INCLUDE_DIRECTORIES})
  FOREACH(_D ${${PROJECT_NAME}_LINK_DIRECTORIES})
    LINK_DIRECTORIES(${_D})
  ENDFOREACH(_D ${${PROJECT_NAME}_LINK_DIRECTORIES})

  IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ADD_EXECUTABLE(${_EXE} WIN32 ${${_EXE}_FSOURCES})
    SET_TARGET_PROPERTIES(${_EXE} PROPERTIES COMPILE_FLAGS "-DEMULATOR=\\\"wine\\\" -DWRAPPER=\\\"\\\"")
  ELSE()
    ADD_EXECUTABLE(${_EXE} ${${_EXE}_FSOURCES})
    SET_TARGET_PROPERTIES(${_EXE} PROPERTIES COMPILE_FLAGS "-DEMULATOR=\\\"\\\" -DWRAPPER=\\\"\\\"")
  ENDIF()

  #Use the proper linker for the proper language
  # fortran -> gfortran; {c,cpp} -> link.exe
  IF(BUILD_AS_CPP)
    SET(${_EXE}_FORTRAN FALSE)
    FOREACH(_TF ${${_EXE}_FSOURCES})
      IF(${_TF} MATCHES "[.]c$")
        set_source_files_properties(${_TF} PROPERTIES LANGUAGE CXX)
      ENDIF(${_TF} MATCHES "[.]c$")
      IF(${_TF} MATCHES "[.]f$")
        SET(${_EXE}_FORTRAN TRUE)
      ENDIF()
    ENDFOREACH(_TF ${${_EXE}_FSOURCES})
  ENDIF(BUILD_AS_CPP)

  IF(MSVC AND ${_EXE}_FORTRAN)
    SET_TARGET_PROPERTIES(${_EXE} PROPERTIES LINK_FLAGS "-Wl,--as-needed")
    SET(CMAKE_EXE_LINKER_FLAGS "")
    SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "")
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "")
    SET(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "")
  ENDIF(MSVC AND ${_EXE}_FORTRAN)

  # project name shared or static lib
  IF(${PROJECT_NAME}_SHARED_LIB_LINK)
    ADD_DEPENDENCIES(${_EXE} ${PROJECT_NAME}_shared)
    TARGET_LINK_LIBRARIES(${_EXE} ${${PROJECT_NAME}_SHARED_LIB_LINK})
  ELSE(${PROJECT_NAME}_SHARED_LIB_LINK)
    IF(${PROJECT_NAME}_STATIC_LIB)
      ADD_DEPENDENCIES(${_EXE} ${PROJECT_NAME}_static)
      TARGET_LINK_LIBRARIES(${_EXE} ${${PROJECT_NAME}_STATIC_LIB})
    ENDIF(${PROJECT_NAME}_STATIC_LIB)
  ENDIF(${PROJECT_NAME}_SHARED_LIB_LINK)
  FOREACH(_L ${${PROJECT_NAME}_LINK_LIBRARIES})
    IF(NOT ${_EXE}_FORTRAN)
      TARGET_LINK_LIBRARIES(${_EXE} ${_L})
    ELSE()
      # Hack to remove unneeded library
      IF(NOT (${_L} MATCHES "libgcc" OR ${_L} MATCHES "libgfortran"))
        TARGET_LINK_LIBRARIES(${_EXE} ${_L})
      ENDIF()
    ENDIF()
  ENDFOREACH(_L ${${PROJECT_NAME}_TARGET_LINK_LIBRARIES})

  FOREACH(_L ${TEST_LIBS})
    TARGET_LINK_LIBRARIES(${_EXE} ${_L})
  ENDFOREACH()
  FOREACH(_D ${TEST_INCLUDE_DIR})
    include_directories(${_D})
  ENDFOREACH()

  LIST(LENGTH ${_EXE}_DATA_LIST_${_CURRENT_TEST_DIRECTORY} count)
  MATH(EXPR count "${count}-1")
  FOREACH(i RANGE ${count})
    IF(count EQUAL -1) # there is no data file ...
      SET(_TEST_NAME ${_EXE})
      IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} wine ${_EXE}${EXE_EXT})
      ELSE(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_EXE} ${_EXE}${EXE_EXT})
      ENDIF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ELSE(count EQUAL -1)
      LIST(GET ${_EXE}_DATA_LIST_${_CURRENT_TEST_DIRECTORY} ${i} _DATA_FILE)
      LIST(GET ${_EXE}_NAME_LIST_${_CURRENT_TEST_DIRECTORY} ${i} _TEST_NAME)
      IF(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_TEST_NAME} wine ${_EXE}${EXE_EXT} ./data/${_DATA_FILE})
      ELSE(CROSSCOMPILING_LINUX_TO_WINDOWS)
        ADD_TEST(${_TEST_NAME} ${_EXE}${EXE_EXT} ./data/${_DATA_FILE})
      ENDIF(CROSSCOMPILING_LINUX_TO_WINDOWS)
    ENDIF(count EQUAL -1)

    SET_TESTS_PROPERTIES(${_TEST_NAME} PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;test unsucceeded")

    set_tests_properties(${_TEST_NAME} PROPERTIES ENVIRONMENT LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}:${LIBFORTests})
    if(CMAKE_SYSTEM_NAME MATCHES Windows)
      set_tests_properties(${_TEST_NAME} PROPERTIES ENVIRONMENT "Path=@CMAKE_BINARY_DIR@/src\;@ENV_PATH@")
    endif()
    if(APPLE)
      set_tests_properties(${_TEST_NAME} PROPERTIES ENVIRONMENT DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}:${LIBFORTests})
    endif()

    IF(${_TEST_NAME}_PROPERTIES)
      SET_TESTS_PROPERTIES(${_TEST_NAME} PROPERTIES ${${_TEST_NAME}_PROPERTIES})
    ENDIF(${_TEST_NAME}_PROPERTIES)

  ENDFOREACH(i RANGE ${count})

ENDFOREACH(_EXE ${_EXE_LIST_${_CURRENT_TEST_DIRECTORY}})
