
/*! \mainpage  MultiBody Tool Box Documentation
 *
 * \section intro_sec Introduction
 *
 * This is the MultiBody Tool Box documentation of the Saladyn project. This tool box is composed of the libraries CADMBTB and MBTB.<br>
 * - CADMBTB provides the geometrical features needed to perform the multi bodies system simulation. In view of a Salome integration, the CADMBTB is based on the OpenCascade Library.
 * - MBTB provides an Application Programming Interface to define and simulate a multi bodies system.
 * These modules have a python API generated by SWIG from the files MBTB_PYTHON_API.hpp and CADMBTB_PYTHON_API.hpp .
 *
 * \section install_sec Installation
 *
 * \subsection build_subsec Build and compilation
 * To compil and build the python modules, run 'cmake SALADYN_DIR/trunk/Multibody/src' <br>
 * It will build the following directories:
- SALADYN_BUILD/MBTB
- SALADYN_BUILD/MBTB/CADMBTB : containing libCADMBTB.so
- SALADYN_BUILD/MBTB/CADMBTB : containing libTIMERMBTB.so
- SALADYN_BUILD/MBTB/MBTB : containing libMBTB.so
- SALADYN_BUILD/MBTB/plugin : containing libplugin1.so
- SALADYN_BUILD/MBTB/frontEnd
- SALADYN_BUILD/MBTB/frontEnd/CADMBTB : containing the python module cadmbtb
- SALADYN_BUILD/MBTB/frontEnd/MBTB : containing the python module mbtb
- SALADYN_BUILD/MBTB/TIMERMBTB : An API on a simple timer profiling library.
 *
 * \subsection tools_subsec Tools required
 * - Siconos
 * - OpenCascade
 *
 * \subsection toolsoption_subsec Tools optional
 * - pythonOCC, only for the 3D visualisation.
 *
 * \subsection running Intallation and running tests
 *
 * The directory SALADYN_DIR/trunk/Multibody/Tests contains some tests about the multiBodies tool box. <br>
 * Each example directory contains a bodydef.py describing the multibody.<br>
 * It assumes that environment variable SALADYN_BUILD and SALADYN_DIR are defined.<br>
 * SALADYN_BUILD is the directory containing the directory MBTB used for the compilation.<br>
 * SALADYN_DIR is the main directory of saladyn.<br><br>
 * To run an example:
 * - Go to the directory of the example.
 * - Copy the file SALADYN_DIR/trunk/Multibody/Tests/E1/env.sh, and make the necessary adaptations.
 * - source env.sh
 * - python ../run.py
 *
 * <br><br>
 * The python files involved during the simulation are:
 * - bodydef.py, this file is required, it contains the multi bodies system. It is the input file. See the SliderCrank example module for a complete documentaion.
 * - mbtbLocalOptions.py, this file is optional, it is located in the example directory. It is used to defined the local options. See the mbtbLocalOptions module for a complete documentaion.
 * - Tests/mbtbDefaultOptions.py, this file must not be modified by the user, it contains the default options.
 * - Tests/run.py, this file must not be modified by the user, like said previously, it runs the simulation.
 * <BR><BR>
 *
 */


/*! \addtogroup CADMBTB_API
 * \brief This module provides an API on the 3D modeler dedicated to the Multi Bodies simulation.
 *
 *  It contains the API used by the module CADMBTB. <br>
 *  It provides the 3D modeler features used for the MBTB.
 *  @{
 */
#ifndef CADMBTBAPI
#define CADMBTBAPI
//! It updates the graphic.
/*!
  It assume that  CADMBTB_setGraphicContext has been called, else it does nothing.
*/
void CADMBTB_updateGraphic();
//! It initializes the CABMBTB library. It consists in allocating the working memory of n2qn1.
/*!
  \param [in] unsigned int NumberOfObj.
  \param [in] number of contacts.
 */
void CADMBTB_init(unsigned int NumberOfObj,unsigned int NumberOfContacts);
//! CADMBTB_initContact
/*!
  It is called to initialize the Bounding Box of the paremters. <br>
  It must be call as few as possible because of a bug in OCC: Computation becomming more and more slow. <br>
  It must be underline that the parameters used by qnb.f are not saved between the time steps.
*/
void CADMBTB_initContact(unsigned int contactId);
//! CADMBTB_reset
/*!
  It resets the  CABMBTB library: do nothing in current version.
 */
void CADMBTB_reset();

//! CADMBTB_loadCADFile.
/*
* Load a CAD file
*  \param [in] unsigned int id, an identifier of the object (must be 0 =< id < NumberOfObj)
*  \param [in]  const char * fileName, a CAD file.
*/
void CADMBTB_loadCADFile(unsigned int id, const char * fileName);
//! CADMBTB_buildGraphicalModel
/*
 *It builds the graphical model of object, if it is not called, the object will be not draw in the 3D view.
 *\param [in] unsigned int id, identifier of the object (must be 0 =< id < NumberOfObj)
 */
void CADMBTB_buildGraphicalModel(unsigned int id);
//! CADMBTB_moveModelFromModel
/*!
  To move a object from an other on. (useful for contact having the same position of DS)
  Implementation:
  It consists to apply the same DISPLACEMENT computed previously by the function CADMBTB_moveObjectFromQ.
  Warning : sStartTopoDS[id] is not updated.
  \param [in] unsigned int idModel1, the identifier of the moved object
  \param [in] unsigned int idModel2, the identifier of the referenced object
 */
void CADMBTB_moveModelFromModel(unsigned int idModel1, unsigned int idModel2);

//! CADMBTB_moveGraphicalModelFromModel
/*!
  To move a Graphical model from an object, indeed the graphical model has to follow the mechanical model.
  Implementation:
  It consists to set the current transformation using sGeomTrsf[idGraphicModel] computed in the function CADMBTB_moveObjectFromQ.
  \param [in] unsigned int idGraphicModel, the identifier of the graphical model
  \param [in] unsigned int idModel, the identifier of the referenced object
 */
void CADMBTB_moveGraphicalModelFromModel(unsigned int idGraphicModel, unsigned int idModel);
//! CADMBTB_moveObjectFromQ
/*
  To move an object using quaternion.
  Implementation:
  1) It consists in computing the DISPLACEMENT beteween (x,y,z,q1,q2,q3,q4) and the current position stored in sStartTopoDS[id].
  2) The displacement is applayed
  3) The sStartTopoDS[id] is updated
  \param [in] unsigned int idModel, the identifier of the moved object
  \param [in] double& x, x translation
  \param [in] double& y, y translation
  \param [in] double& z, z translation
  \param [in] double& q1, first quaternion: cos(theta/2)
  \param [in] double& q2,
  \param [in] double& q3,
  \param [in] double& q4,
 */
void CADMBTB_moveObjectFromQ(unsigned int id,double& x,double& y, double& z, double& q1,double& q2,double& q3,double& q4);

//! CADMBTB_setLocation
/*! Set the location of an object WITHOUT moving it. Useful to defined the coordinate system attatched to an object during the initialization.
  \param [in] unsigned int idModel, the identifier of the object
  \param [in] double& x, x translation
  \param [in] double& y, y translation
  \param [in] double& z, z translation
 */
void CADMBTB_setLocation(unsigned int id, double& x,double& y, double& z);

//! CADMBTB_computeUVBounds
/*!
  It comuptes the boubing box (in parameter space), do only once because OCC is very slow.
 */
void CADMBTB_computeUVBounds(unsigned int id);

//! CADMBTB_getUVBounds2
/*! To get UV bound of the second elem (face or edge) of a shape
* \param id [in]: Identifier of the shape.
* \param U1 [out]: inf U bound.
* \param U2 [out]: sup U bound.
* \param V1 [out]: inf V bound.
* \param V2 [out]: sup V bound.
*/
void CADMBTB_getUVBounds2(unsigned int id, double& U1, double& U2, double& V1, double& V2);
//! CADMBTB_getUVBounds
/*! To get UV bound of the first elem (face or edge) of a shape
* \param id [in]: Identifier of the shape.
* \param U1 [out]: inf U bound.
* \param U2 [out]: sup U bound.
* \param V1 [out]: inf V bound.
* \param V2 [out]: sup V bound.
*/
void CADMBTB_getUVBounds(unsigned int id, double& U1, double& U2, double& V1, double& V2);

//! CADMBTB_getMinDistance
/*!
 *To compute de distance between two objects, P1, P2 are the contact points in the abs frame.
 * n is the nornmal, in the abs frame.
 *
 * \param [in]: unsigned int idContact: id of contact(useful for drawing of artefacts).
 * \param [in]: unsigned int id1: the identifier of the first object.
 * \param [in]: unsigned int id2: the identifier of the second object.
 * \param [out]: double first coordinate of P1.
 * \param [out]: double second coordinate of P1.
 * \param [out]: double third coordinate of P1.
 * \param [out]: double first coordinate of P2.
 * \param [out]: double second coordinate of P2.
 * \param [out]: double third coordinate of P2.
 * \param [out]: double first coordinate of n.
 * \param [out]: double second coordinate of n.
 * \param [out]: double third coordinate of n.
 * \param [in/out]: double distance.
 */
void CADMBTB_getMinDistance
(unsigned int idContact,unsigned int id1, unsigned int id2,
 double& X1, double& Y1, double& Z1,
 double& X2, double& Y2, double& Z2,
 double& nX, double& nY, double& nZ, unsigned int normalFromFace1,
 double& MinDist);

//! CADMBTB_setNbOfArtefacts
/*!
 * To declare the number of artefacts: ie graphical decoration( forces, normal, P1P2)
 * \param [nb]: number of artefacts
 */
void CADMBTB_setNbOfArtefacts(unsigned int nb);
//! CADMBTB_buildLineArtefactLine
/*!
  To build a line artefact (P1P2).
 *
 */
void CADMBTB_buildLineArtefactLine(unsigned int id,  double* X1, double* Y1, double* Z1,
                                   double* X2, double* Y2, double* Z2);
//! CADMBTB_buildOrientedLineArtefactLine
/*!
  To build a oriented line artefact (n).
 *
 */
void CADMBTB_buildOrientedLineArtefactLine(unsigned int id,  double* X1, double* Y1, double* Z1,
    double* X2, double* Y2, double* Z2);
//! CADMBTB_buildCylinderArtefactLine
/*!
  To build a cylinder artefact (forces).
 */
void CADMBTB_buildOrientedLineArtefactLine1(unsigned int id,  double* X1, double* Y1, double* Z1, double* X2, double* Y2, double* Z2);

void CADMBTB_buildCylinderArtefactLine(unsigned int id,  double* X1, double* Y1, double* Z1,
                                       double* X2, double* Y2, double* Z2, double *radius);
/*! @} */

#endif
