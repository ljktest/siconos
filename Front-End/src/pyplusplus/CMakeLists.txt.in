CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_MODULE_PATH @CMAKE_SOURCE_DIR@/cmake)

ENABLE_LANGUAGE(C)
ENABLE_LANGUAGE(CXX)
ENABLE_LANGUAGE(Fortran)

INCLUDE(SiconosTools)

PROJECT(Siconos CXX)

COMPILE_WITH(SiconosKernel REQUIRED)
COMPILE_WITH(SiconosNumerics REQUIRED)
COMPILE_WITH(BLAS REQUIRED)
COMPILE_WITH(LAPACK REQUIRED)
COMPILE_WITH(ATLAS REQUIRED)
COMPILE_WITH(PythonLibs REQUIRED)
COMPILE_WITH(Boost REQUIRED)

FIND_PACKAGE(Boost COMPONENTS python REQUIRED)

INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/..)

# boost 3.8
# Determine extra libraries we need to link against to build Python
# extension modules.
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
  endif(CMAKE_COMPILER_IS_GNUCXX)
elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSD")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "DragonFly")
  # DragonFly is a variant of FreeBSD
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "OSF")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread" "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
  endif(CMAKE_COMPILER_IS_GNUCXX)    
elseif(CMAKE_SYSTEM_NAME STREQUAL "QNX")
  # No options necessary for QNX
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  # No options necessary for Mac OS X
elseif(CMAKE_SYSTEM_NAME STREQUAL "HP-UX")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
elseif(UNIX)
  # Assume -pthread and -ldl on all other variants
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread" "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "util")
  endif(CMAKE_COMPILER_IS_GNUCXX)    
endif(CMAKE_SYSTEM_NAME STREQUAL "SunOS")

# a verification
FOREACH(_lib ${PYTHON_LIBRARIES})
  FIND_LIBRARY(_FOUND ${_lib})
  IF(NOT _FOUND)
    MESSAGE(FATAL_ERROR "cannot found library ${_lib}")
  ENDIF(NOT _FOUND)
ENDFOREACH(_lib ${PYTHON_LIBRARIES})


FILE(GLOB BINDINGS *.h *.hpp *.cpp)

ADD_LIBRARY(Siconos ${BINDINGS})

# to avoid compilation failures with boost python and pure virtual
# operators
ADD_DEFINITIONS(-DPURE_DEF={})

SET_TARGET_PROPERTIES(Siconos 
  PROPERTIES PREFIX "" 
  LINKER_LANGUAGE CXX
  VERSION @VERSION@)
# installation path needed

TARGET_LINK_LIBRARIES(Siconos 
  ${PYTHON_LIBRARIES}
  ${Siconos_LINK_LIBRARIES}
  ${FORTRAN_LIBRARIES}
  ${Boost_LIBRARIES})
