SET_SOURCE_FILES_PROPERTIES(Numerics.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(Kernel.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(Numerics.i Kernel.i PROPERTIES SWIG_FLAGS "-I${CMAKE_BINARY_DIR}/src/swig/Siconos")

# do not skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 

# the RPATH to be used when installing
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

# don't add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# doxygen documentation
#

#  http://www.swig.org/Doc2.0/SWIG.html
#  5.1.3 Comments
#  
#  C and C++ style comments may appear anywhere in interface files. In
#  previous versions of SWIG, comments were used to generate
#  documentation files. However, this feature is currently under repair
#  and will reappear in a later SWIG release.
#
#  This is a workaround:
FIND_PACKAGE(Doxygen REQUIRED)


# xml files generation

# find all siconos headers
FILE(GLOB _HDRS ${SiconosNumerics_INCLUDE_DIRS}/*.h)
FILE(GLOB _HPPDRS ${SiconosKernel_INCLUDE_DIRS}/*.hpp)

SET(DOXYGEN_OUTPUT ${CMAKE_CURRENT_BINARY_DIR})

IF(DOXYGEN_FOUND)
  SET(XML_DOXY_CONFIG "${CMAKE_CURRENT_BINARY_DIR}/xml_doxy.config")

  IF(NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/Model_8hpp.xml) 
    CONFIGURE_FILE(xml_doxy.config.in ${CMAKE_CURRENT_BINARY_DIR}/xml_doxy.config)
    EXECUTE_PROCESS(COMMAND ${DOXYGEN_EXECUTABLE} ${XML_DOXY_CONFIG} WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
  ENDIF()

  # for each headers find associated xmls generated by doxygen
  FOREACH(_F ${_HDRS} ${_HPPDRS})
    GET_FILENAME_COMPONENT(_FWE ${_F} NAME_WE)
    FILE(GLOB ${_FWE}_XMLS  ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/class${_FWE}.xml  ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/${_FWE}_8h.xml )
  ENDFOREACH(_F ${_HDRS} ${_HPPDRS})


  SET(NUMERICS_DOCSTRINGS_FILES)
  FOREACH(_F ${_HDRS})
    GET_FILENAME_COMPONENT(_FWE ${_F} NAME_WE)
    FOREACH(_FXML ${${_FWE}_XMLS})
      GET_FILENAME_COMPONENT(_FWE_XML ${_FXML} NAME_WE)
      ADD_CUSTOM_COMMAND(OUTPUT ${_FWE_XML}.i 
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/${_FWE_XML}.xml
        COMMAND ./doxy2swig.py ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/${_FWE_XML}.xml ${_FWE_XML}.i
        COMMENT "docstrings generation for ${_FWE} (parsing ${_FWE_XML}.xml)")
      ADD_CUSTOM_TARGET(doc_${_FWE_XML}.i DEPENDS ${_FWE_XML}.i)
      LIST(APPEND NUMERICS_DOCSTRINGS_FILES ${_FWE_XML}.i)
    ENDFOREACH(_FXML ${${_FWE}_XMLS})
  ENDFOREACH(_F ${_HDRS})
  
  SET(KERNEL_DOCSTRINGS_FILES)
  FOREACH(_F ${_HPPDRS})
    GET_FILENAME_COMPONENT(_FWE ${_F} NAME_WE)
    FOREACH(_FXML ${${_FWE}_XMLS})
      GET_FILENAME_COMPONENT(_FWE_XML ${_FXML} NAME_WE)
      ADD_CUSTOM_COMMAND(OUTPUT ${_FWE_XML}.i 
        DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/${_FWE_XML}.xml
        COMMAND ./doxy2swig.py ${CMAKE_CURRENT_BINARY_DIR}/FrontEnd/xml/${_FWE_XML}.xml ${_FWE_XML}.i
        COMMENT "docstrings generation for ${_FWE} (parsing ${_FWE_XML}.xml)")
      ADD_CUSTOM_TARGET(doc_${_FWE_XML}.i DEPENDS ${_FWE_XML}.i)
      LIST(APPEND KERNEL_DOCSTRINGS_FILES ${_FWE_XML}.i)
    ENDFOREACH(_FXML ${${_FWE}_XMLS})
  ENDFOREACH(_F ${_HPPDRS})

  ADD_CUSTOM_COMMAND(OUTPUT Numerics-docstrings.i
    DEPENDS ${NUMERICS_DOCSTRINGS_FILES}
    COMMAND cat ${NUMERICS_DOCSTRINGS_FILES} > Numerics-docstrings.i
    COMMENT "Numerics docstrings concatenation")
  
  ADD_CUSTOM_COMMAND(OUTPUT Kernel-docstrings.i
    DEPENDS ${KERNEL_DOCSTRINGS_FILES}
    COMMAND cat ${KERNEL_DOCSTRINGS_FILES} > Kernel-docstrings.i
    COMMENT "Kernel docstrings concatenation")
  
  ADD_CUSTOM_TARGET(numerics_docstrings DEPENDS Numerics-docstrings.i)
  ADD_CUSTOM_TARGET(kernel_docstrings DEPENDS Kernel-docstrings.i)
  
  
  #
  # dependencies for generated sources
  #
  SET(SWIG_MODULE_Kernel_EXTRA_DEPS
    KernelTypes.i
    KernelRegistration.i
    Common.i
    numpy.i
    Kernel-docstrings.i)
  
  SET(SWIG_MODULE_Numerics_EXTRA_DEPS
    KernelTypes.i
    KernelRegistration.i
    Common.i
    numpy.i
    Numerics-docstrings.i)
ENDIF()

  # WARNING ${swig_generated_file_fullname} is overriden 
# save it in a specific var if needed
SWIG_ADD_MODULE(Numerics python Numerics.i)
SET(Numerics_generated_file_fullname ${swig_generated_file_fullname})
MESSAGE(STATUS "Numerics generated files ${swig_generated_file_fullname}")

SWIG_ADD_MODULE(Kernel python Kernel.i)
SET(Kernel_generated_file_fullname ${swig_generated_file_fullname})
MESSAGE(STATUS "Kernel generated files ${swig_generated_file_fullname}")

#
# dependencies for libraries compilation
#
ADD_DEPENDENCIES(${SWIG_MODULE_Kernel_REAL_NAME} ${SWIG_MODULE_Numerics_REAL_NAME})

IF(DOXYGEN_FOUND)
  ADD_DEPENDENCIES(${SWIG_MODULE_Numerics_REAL_NAME} numerics_docstrings)
  ADD_DEPENDENCIES(${SWIG_MODULE_Kernel_REAL_NAME} kernel_docstrings)
ENDIF()

#
# Link
#
SWIG_LINK_LIBRARIES(Numerics ${PYTHON_LIBRARIES} 
  ${SiconosNumerics_LIBRARIES} 
  ${FORTRAN_LIBRARIES})

SWIG_LINK_LIBRARIES(Kernel ${PYTHON_LIBRARIES} 
  ${SiconosKernel_LIBRARIES} 
  ${SiconosNumerics_LIBRARIES}
  ${SiconosIO_LIBRARIES}
  ${FORTRAN_LIBRARIES} 
  ${Boost_LIBRARIES})

# get python dist-packages
# warning python may not know cmake_install_prefix
# installation in standard python dist package with:
# -DSTD_PYTHON_DIST_PACKAGES=TRUE 
#
# installation in specific place:
# -DPYTHON_DIST_PACKAGES=/my/specific/place

IF(STD_PYTHON_DIST_PACKAGES)
  EXECUTE_PROCESS ( COMMAND 
    python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()" 
    OUTPUT_VARIABLE PYTHON_DIST_PACKAGES 
    OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE(STD_PYTHON_DIST_PACKAGES)
  IF(NOT PYTHON_DIST_PACKAGES)
    EXECUTE_PROCESS ( COMMAND 
      python -c "from distutils.sysconfig import get_python_lib; print get_python_lib(0,0,\"\")" 
      OUTPUT_VARIABLE PYTHON_DIST_PACKAGES 
      OUTPUT_STRIP_TRAILING_WHITESPACE)
  ENDIF(NOT PYTHON_DIST_PACKAGES)
ENDIF(STD_PYTHON_DIST_PACKAGES)

MESSAGE(STATUS "PYTHON_DIST_PACKAGES : ${PYTHON_DIST_PACKAGES}")

INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/Numerics.py 
  DESTINATION ${PYTHON_DIST_PACKAGES}/Siconos)

INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/Kernel.py 
  DESTINATION ${PYTHON_DIST_PACKAGES}/Siconos)

CONFIGURE_FILE(__init__.py.in ${CMAKE_CURRENT_BINARY_DIR}/__init__.py)

CONFIGURE_FILE(doxy2swig.py  ${CMAKE_CURRENT_BINARY_DIR}/doxy2swig.py COPYONLY)

INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/__init__.py 
  DESTINATION ${PYTHON_DIST_PACKAGES}/Siconos)

MESSAGE(STATUS "swig modules: ${SWIG_MODULE_Numerics_REAL_NAME},  ${SWIG_MODULE_Kernel_REAL_NAME}")

INSTALL(TARGETS ${SWIG_MODULE_Numerics_REAL_NAME} ${SWIG_MODULE_Kernel_REAL_NAME}
  DESTINATION ${PYTHON_DIST_PACKAGES}/Siconos)

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/KernelTypes.i
	      ${CMAKE_CURRENT_SOURCE_DIR}/Kernel.i
	      ${CMAKE_CURRENT_SOURCE_DIR}/addons.hpp
  DESTINATION share/siconos-front-end/swig)


ENABLE_TESTING()

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/tests/Rover1039.dat Rover1039.dat COPYONLY)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/tests/result.ref result.ref COPYONLY)


ADD_TEST(lcp ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_lcp.py)
ADD_TEST(sparse ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_sparse.py)
ADD_TEST(Kernel ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_Kernel.py)
ADD_TEST(friction_contact ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_friction_contact.py)
ADD_TEST(bouncing_ball ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_bouncing_ball.py)
ADD_TEST(smc ${CMAKE_BINARY_DIR}/src/swig/runtest.py ${CMAKE_CURRENT_SOURCE_DIR}/tests/test_smc.py)

SET_TESTS_PROPERTIES(lcp PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;Assertion")
SET_TESTS_PROPERTIES(sparse PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;Assertion")
SET_TESTS_PROPERTIES(Kernel PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;Assertion")
SET_TESTS_PROPERTIES(friction_contact PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;Assertion")
SET_TESTS_PROPERTIES(bouncing_ball PROPERTIES FAIL_REGULAR_EXPRESSION "FAILURE;Exception;failed;ERROR;Assertion")


SUBDIRS(tests)
