PROJECT(Siconos CXX)

COMPILE_WITH(SiconosKernel REQUIRED)
COMPILE_WITH(SiconosNumerics REQUIRED)
COMPILE_WITH(BLAS REQUIRED)
COMPILE_WITH(LAPACK REQUIRED)
COMPILE_WITH(ATLAS REQUIRED)
COMPILE_WITH(LibXml2 REQUIRED)
COMPILE_WITH(PythonLibs REQUIRED)

INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})

FILE(GLOB SICONOS_HEADERS ${SiconosKernel_INCLUDE_DIRS}/*.h ${SiconosKernel_INCLUDE_DIRS}/*.hpp)

# boost 3.8
# Determine extra libraries we need to link against to build Python
# extension modules.
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
  endif(CMAKE_COMPILER_IS_GNUCXX)
elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSD")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "DragonFly")
  # DragonFly is a variant of FreeBSD
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread")
elseif(CMAKE_SYSTEM_NAME STREQUAL "OSF")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread" "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
  endif(CMAKE_COMPILER_IS_GNUCXX)    
elseif(CMAKE_SYSTEM_NAME STREQUAL "QNX")
  # No options necessary for QNX
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  # No options necessary for Mac OS X
elseif(CMAKE_SYSTEM_NAME STREQUAL "HP-UX")
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "rt")
elseif(UNIX)
  # Assume -pthread and -ldl on all other variants
  set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "pthread" "dl")
  if(CMAKE_COMPILER_IS_GNUCXX)
    set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES} "util")
  endif(CMAKE_COMPILER_IS_GNUCXX)    
endif(CMAKE_SYSTEM_NAME STREQUAL "SunOS")

# a verification
FOREACH(_lib ${PYTHON_LIBRARIES})
  FIND_LIBRARY(_FOUND ${_lib})
  IF(NOT _FOUND)
    MESSAGE(FATAL_ERROR "cannot found library ${_lib}")
  ENDIF(NOT _FOUND)
ENDFOREACH(_lib ${PYTHON_LIBRARIES})

CONFIGURE_FILE(doxygen.py ${CMAKE_CURRENT_BINARY_DIR}/doxygen.py COPYONLY)

# not so fast and huge memory needed!
IF(GLOBAL_BINDINGS)
  SET(PYH)
  FOREACH(_H ${SICONOS_HEADERS})
    IF(PYH)
      SET(PYH "${PYH},'${_H}'")
    ELSE(PYH)
      SET(PYH '${_H}')
    ENDIF(PYH)
  ENDFOREACH(_H ${SICONOS_HEADERS})

  CONFIGURE_FILE(global-generator.py.in ${CMAKE_CURRENT_BINARY_DIR}/SiconosGenerator.py)

  ADD_CUSTOM_TARGET(SiconosBindings.cpp ALL)

  ADD_CUSTOM_COMMAND(TARGET SiconosBindings.cpp
    COMMAND python ${CMAKE_CURRENT_BINARY_DIR}/SiconosGenerator.py
    OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/SiconosBindings.cpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/SiconosGenerator.py)
  

  SET(BINDINGS ${CMAKE_CURRENT_BINARY_DIR}/SiconosBindings.cpp)

# else make bindings for each header 
ELSE(GLOBAL_BINDINGS)

  SET(BINDINGS)

  FOREACH(_H ${SICONOS_HEADERS})
    GET_FILENAME_COMPONENT(_HP ${_H} NAME)
    GET_FILENAME_COMPONENT(_HN ${_H} NAME_WE)
    CONFIGURE_FILE(code-generator.py.in ${CMAKE_CURRENT_BINARY_DIR}/${_HN}Generator.py)
    
    ADD_CUSTOM_TARGET(${_HN}Bindings.cpp ALL)
    
    ADD_CUSTOM_COMMAND(TARGET ${_HN}Bindings.cpp
      COMMAND python ${CMAKE_CURRENT_BINARY_DIR}/${_HN}Generator.py
      OUTPUTS ${_HN}Bindings.cpp
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${_HN}Generator.py)

    LIST(APPEND BINDINGS ${CMAKE_CURRENT_BINARY_DIR}/${_HN}Bindings.cpp)

  ENDFOREACH(_H ${SICONOS_HEADERS})
ENDIF(GLOBAL_BINDINGS)


ADD_LIBRARY(Siconos ${BINDINGS})

ADD_DEPENDENCIES(Siconos ${BINDINGS})

SET_TARGET_PROPERTIES(Siconos 
  PROPERTIES PREFIX "" 
  LINKER_LANGUAGE CXX
  VERSION ${VERSION})
# installation path needed

TARGET_LINK_LIBRARIES(Siconos ${PYTHON_LIBRARIES})
