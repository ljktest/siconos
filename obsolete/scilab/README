# Siconos-Front-End version 3.0.0, Copyright INRIA 2005-2008.
# Siconos is a program dedicated to modeling, simulation and control
# of non smooth dynamical systems.	
# Siconos is a free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Siconos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Siconos; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# Contact: Vincent ACARY vincent.acary@inrialpes.fr 
#	
#--------------------------------------------------
#                  SICONOS PROJECT
#--------------------------------------------------

#--------------------------------------------------
# Author(s)      : RPG
# Creation Date  : 06 June 2005
# Version        : 26 Jul 2007
# Copyright      : INRIA 2007
#--------------------------------------------------

Introduction
-------------

The directory scilab/ contains a prototype of siconos interface with
scilab. It allows a 'high-level' interaction with the siconos platform
with around 20 scilab functions. It allows flat acces without having
deep siconos tree acces like proposed with python interface.

Developer's View
----------------

The scilab interface is made following three levels :
 C-level : in the siconos Kernel consisting of pure C functions
 Scilab-Interface :  link between C and scilab function calls
 Scilab-Run : initialisation of scilab

C-level interface: Kernel/src/apiC/
---

Siconos objects are wrapped into pure C functions. 

 There is one class dedicated to be declared in a global scope and to
 be use by the global API C to store informations about siconos
 simulation
=> SiconosDataC.h SiconosDataC.cpp

 The C function Siconos API are exported in SiconosApiC.h and
 implemented in SiconosApiC.cpp. Siconos simulation objects stored in
 SiconosDataC are accessible through index.
=> SiconosApiC.h SiconosApiC.cpp


Scilab-Interface
---
This interface between C and Scilab consists in :
 
  * a gateway table between C and Scilab functions 
     => libSiconosApiSci.c
 
   * an implementation of the interface between C and Scilab functions
     (variables and call)
     => SiconosSci.h/c

   * an automatic generation of scilab loader (loader.sce)
     => builder.sce

For more details, see the part 'Process to integrate a new Scilab
function'.

Scilab-Run 
---

Launching scilab, the process of execution is

scilab> exec './loaderSiconos.sce';
=> link external c++ dynamic libraries (Numerics, Kernel and dependencies)
=> call  loader.sce
   =>  load libSiconosApiSci.so and link C and Scilab functions (addinter)




BouncingBall Execution
-----------------------

Examples/Mechanics/BouncingBall/BouncingBall.sci
---

TBD

Examples/Mechanics/BeadsColumn/ThreeBeadsColumn.sci
---

TBD




Process to integrate a new Scilab function
------------------------------------------

How to add the Scilab function sicMyfunc(...)

In Kernel/src/ApiC

step1 : Write the C function Myfunc() in SiconosApiC.h/cpp

make & installation of the new Kernel

In FrontEnd/Scilab/sictest.c

step2: tested the C-function in FrontEnd/Scilab/sictest.c

step3 : add the scilab gateway in libSiconosApiSci.c
...
extern Gatefunc sicMyfunc;
...
{(Myinterfun)sci_gateway,sicMyfuncInterface,"sicMyfunc"},
...

step4 : Write sicMyfuncInterface in SiconosSci.c

..
int sicMyfunclInterface(char *fname)
{
  // stack C / scilab  interface (GetRhsVar...)

   sicMyfunc(...) call

  //  Return variables
}
...


step5 : Automatic generation

edit builder.sce    
  add the new entry in table 
...
'sicMyfunc', 'sicMyfuncInterface';
...

then generation by builder.sce
 loader.sce
 Makelib

compilation.

TODO for a complete toolbox
----------------------------

1 -  test of  Kernel/src/apiC 
 
> make -f Make-test
  ./sictest 0 ok

Debug the other tests (number 1 to 4):
  * The "four cases" of BouncingBall(TS)(ED)(TSXml)(EDXml)
  * ThreeBeadsColumn

2 - Update the scilab interface and samples

3 - Enhace the scilab balls visualisation

4 - Complete the C/Scilab API (check with Franck)

5 - Siconos integration :
     doxygen enhacement  (SiconosApiC.h)
     integrate the README in a .dox
     terminate the configure process:
        loaderSiconos.sce.in, env.sh.in, Makefile.in

6 - Complete scilab samples

7 - Automatic scilab interface generation 

8 - Plugin in scilab

9 - Publish the package as a scilab toolbox
